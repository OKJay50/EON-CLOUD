import * as tsplus_module_1 from "@effect/stream/Stream";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "dfx/utils/hub";
import * as tsplus_module_4 from "@effect/io/Hub";
import * as tsplus_module_5 from "dfx/_common";
import * as tsplus_module_6 from "@effect/io/Layer";
import { LiveSharder, Sharder } from "./DiscordGateway/Sharder.js";
const fromDispatchFactory = (source) => (event) => tsplus_module_1.map(tsplus_module_1.filter(source, p => p.t === event), p => p.d);
const handleDispatchFactory = (hub) => (event, handle) => tsplus_module_3.subscribeForEachPar(hub, _ => {
    if (_.t === event) {
        return handle(_.d);
    }
    return tsplus_module_2.unit();
});
export const make = tsplus_module_2.flatMap(Sharder, sharder => tsplus_module_2.map(tsplus_module_4.unbounded(), hub => {
    const dispatch = tsplus_module_1.fromHub(hub);
    const fromDispatch = fromDispatchFactory(dispatch);
    const handleDispatch = handleDispatchFactory(hub);
    const run = sharder.run(hub);
    return {
        run,
        dispatch,
        fromDispatch,
        handleDispatch,
    };
}));
export const DiscordGateway = tsplus_module_5.Tag();
export const LiveDiscordGateway = tsplus_module_6.provide(tsplus_module_2.toLayer(make, DiscordGateway))(LiveSharder);
//# sourceMappingURL=DiscordGateway.js.map