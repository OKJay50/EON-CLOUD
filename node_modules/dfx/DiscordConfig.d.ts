import { ConfigSecret, Duration, Discord, Config } from "dfx/_common";
export interface DiscordConfig {
    token: ConfigSecret;
    rest: {
        baseUrl: string;
        globalRateLimit: {
            limit: number;
            window: Duration;
        };
    };
    gateway: {
        intents: number;
        presence?: Discord.UpdatePresence;
        shardCount?: number;
        identifyRateLimit: readonly [window: number, limit: number];
    };
}
export declare const DiscordConfig: import("@effect/data/Context").Tag<DiscordConfig, DiscordConfig>;
export interface MakeOpts {
    token: ConfigSecret;
    rest?: Partial<DiscordConfig["rest"]>;
    gateway?: Partial<DiscordConfig["gateway"]>;
}
export declare const make: ({ token, rest, gateway }: MakeOpts) => DiscordConfig;
export declare const makeLayer: (a_0: MakeOpts) => import("@effect-http/client/_common").Layer<never, never, DiscordConfig>;
export declare const makeFromConfig: (_: Config.Wrap<MakeOpts>) => import("@effect-http/client/_common").Layer<never, import("./_common.js").ConfigError, DiscordConfig>;
