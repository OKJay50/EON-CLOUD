import * as tsplus_module_1 from "dfx/_common";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "@effect/io/Deferred";
import * as tsplus_module_4 from "@effect/io/Fiber";
import * as tsplus_module_5 from "@effect/data/Option";
import * as tsplus_module_6 from "@effect/io/Ref";
/**
 * @tsplus fluent effect/io/Hub subscribeForEachPar
 */
export const subscribeForEachPar = (self, effect) => tsplus_module_2.flatMap(tsplus_module_3.make(), deferred => {
    const run = tsplus_module_2.scoped(tsplus_module_2.flatMap(self
        .subscribe(), queue => tsplus_module_2.forever(tsplus_module_2.flatMap(queue
        .take(), _ => tsplus_module_2.fork(tsplus_module_2.catchAllCause(effect(_), _ => tsplus_module_3.failCause(deferred, _)))))));
    return tsplus_module_2.zipParLeft(run, tsplus_module_1.deferredAwait(deferred));
});
/**
 * @tsplus fluent effect/io/Effect foreverSwitch
 */
export const foreverSwitch = (self, f) => tsplus_module_2.flatMap(tsplus_module_3.make(), causeDeferred => tsplus_module_2.flatMap(tsplus_module_6.make(tsplus_module_5.none()), fiberRef => {
    const run = tsplus_module_2.forever(tsplus_module_2.tap(tsplus_module_2.flatMap(tsplus_module_2.flatMap(self, _ => tsplus_module_2.fork(tsplus_module_2.tapErrorCause(f(_), _ => tsplus_module_3.failCause(causeDeferred, _)))), fiber => tsplus_module_6.getAndSet(fiberRef, tsplus_module_5.some(fiber))), _ => tsplus_module_5.match(_, () => tsplus_module_2.unit(), fiber => tsplus_module_4.interrupt(fiber))));
    return tsplus_module_2.zipParLeft(run, tsplus_module_1.deferredAwait(causeDeferred));
}));
//# sourceMappingURL=hub.js.map