export const ActivityFlag = {
    INSTANCE: 1 << 0,
    JOIN: 1 << 1,
    SPECTATE: 1 << 2,
    JOIN_REQUEST: 1 << 3,
    SYNC: 1 << 4,
    PLAY: 1 << 5,
    PARTY_PRIVACY_FRIENDS: 1 << 6,
    PARTY_PRIVACY_VOICE_CHANNEL: 1 << 7,
    EMBEDDED: 1 << 8,
};
export const ApplicationFlag = {
    /** Indicates if an app uses the Auto Moderation API */
    APPLICATION_AUTO_MODERATION_RULE_CREATE_BADGE: 1 << 6,
    /** Intent required for bots in 100 or more servers to receive presence_update events */
    GATEWAY_PRESENCE: 1 << 12,
    /** Intent required for bots in under 100 servers to receive presence_update events, found in Bot Settings */
    GATEWAY_PRESENCE_LIMITED: 1 << 13,
    /** Intent required for bots in 100 or more servers to receive member-related events like guild_member_add. See list of member-related events under GUILD_MEMBERS */
    GATEWAY_GUILD_MEMBERS: 1 << 14,
    /** Intent required for bots in under 100 servers to receive member-related events like guild_member_add, found in Bot Settings. See list of member-related events under GUILD_MEMBERS */
    GATEWAY_GUILD_MEMBERS_LIMITED: 1 << 15,
    /** Indicates unusual growth of an app that prevents verification */
    VERIFICATION_PENDING_GUILD_LIMIT: 1 << 16,
    /** Indicates if an app is embedded within the Discord client (currently unavailable publicly) */
    EMBEDDED: 1 << 17,
    /** Intent required for bots in 100 or more servers to receive message content */
    GATEWAY_MESSAGE_CONTENT: 1 << 18,
    /** Intent required for bots in under 100 servers to receive message content, found in Bot Settings */
    GATEWAY_MESSAGE_CONTENT_LIMITED: 1 << 19,
    /** Indicates if an app has registered global application commands */
    APPLICATION_COMMAND_BADGE: 1 << 23,
};
export const ChannelFlag = {
    /** this thread is pinned to the top of its parent GUILD_FORUM channel */
    PINNED: 1 << 1,
    /** whether a tag is required to be specified when creating a thread in a GUILD_FORUM channel. Tags are specified in the applied_tags field. */
    REQUIRE_TAG: 1 << 4,
};
export function createRoutes(fetch) {
    return {
        addGuildMember: (guildId, userId, params, options) => fetch({
            method: "PUT",
            url: `/guilds/${guildId}/members/${userId}`,
            params,
            options,
        }),
        addGuildMemberRole: (guildId, userId, roleId, options) => fetch({
            method: "PUT",
            url: `/guilds/${guildId}/members/${userId}/roles/${roleId}`,
            options,
        }),
        addThreadMember: (channelId, userId, options) => fetch({
            method: "PUT",
            url: `/channels/${channelId}/thread-members/${userId}`,
            options,
        }),
        batchEditApplicationCommandPermissions: (applicationId, guildId, options) => fetch({
            method: "PUT",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/permissions`,
            options,
        }),
        beginGuildPrune: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/prune`,
            params,
            options,
        }),
        bulkDeleteMessages: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/messages/bulk-delete`,
            params,
            options,
        }),
        bulkOverwriteGlobalApplicationCommands: (applicationId, options) => fetch({
            method: "PUT",
            url: `/applications/${applicationId}/commands`,
            options,
        }),
        bulkOverwriteGuildApplicationCommands: (applicationId, guildId, params, options) => fetch({
            method: "PUT",
            url: `/applications/${applicationId}/guilds/${guildId}/commands`,
            params,
            options,
        }),
        createAutoModerationRule: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/auto-moderation/rules`,
            params,
            options,
        }),
        createChannelInvite: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/invites`,
            params,
            options,
        }),
        createDm: (params, options) => fetch({
            method: "POST",
            url: `/users/@me/channels`,
            params,
            options,
        }),
        createFollowupMessage: (applicationId, interactionToken, options) => fetch({
            method: "POST",
            url: `/webhooks/${applicationId}/${interactionToken}`,
            options,
        }),
        createGlobalApplicationCommand: (applicationId, params, options) => fetch({
            method: "POST",
            url: `/applications/${applicationId}/commands`,
            params,
            options,
        }),
        createGroupDm: (params, options) => fetch({
            method: "POST",
            url: `/users/@me/channels`,
            params,
            options,
        }),
        createGuild: (params, options) => fetch({
            method: "POST",
            url: `/guilds`,
            params,
            options,
        }),
        createGuildApplicationCommand: (applicationId, guildId, params, options) => fetch({
            method: "POST",
            url: `/applications/${applicationId}/guilds/${guildId}/commands`,
            params,
            options,
        }),
        createGuildBan: (guildId, userId, params, options) => fetch({
            method: "PUT",
            url: `/guilds/${guildId}/bans/${userId}`,
            params,
            options,
        }),
        createGuildChannel: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/channels`,
            params,
            options,
        }),
        createGuildEmoji: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/emojis`,
            params,
            options,
        }),
        createGuildFromGuildTemplate: (templateCode, params, options) => fetch({
            method: "POST",
            url: `/guilds/templates/${templateCode}`,
            params,
            options,
        }),
        createGuildRole: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/roles`,
            params,
            options,
        }),
        createGuildScheduledEvent: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/scheduled-events`,
            params,
            options,
        }),
        createGuildSticker: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/stickers`,
            params,
            options,
        }),
        createGuildTemplate: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/templates`,
            params,
            options,
        }),
        createInteractionResponse: (interactionId, interactionToken, params, options) => fetch({
            method: "POST",
            url: `/interactions/${interactionId}/${interactionToken}/callback`,
            params,
            options,
        }),
        createMessage: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/messages`,
            params,
            options,
        }),
        createReaction: (channelId, messageId, emoji, options) => fetch({
            method: "PUT",
            url: `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`,
            options,
        }),
        createStageInstance: (params, options) => fetch({
            method: "POST",
            url: `/stage-instances`,
            params,
            options,
        }),
        createWebhook: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/webhooks`,
            params,
            options,
        }),
        crosspostMessage: (channelId, messageId, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/messages/${messageId}/crosspost`,
            options,
        }),
        deleteAllReactions: (channelId, messageId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/messages/${messageId}/reactions`,
            options,
        }),
        deleteAllReactionsForEmoji: (channelId, messageId, emoji, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`,
            options,
        }),
        deleteAutoModerationRule: (guildId, autoModerationRuleId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/auto-moderation/rules/${autoModerationRuleId}`,
            options,
        }),
        deleteChannelPermission: (channelId, overwriteId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/permissions/${overwriteId}`,
            options,
        }),
        deletecloseChannel: (channelId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}`,
            options,
        }),
        deleteFollowupMessage: (applicationId, interactionToken, messageId, options) => fetch({
            method: "DELETE",
            url: `/webhooks/${applicationId}/${interactionToken}/messages/${messageId}`,
            options,
        }),
        deleteGlobalApplicationCommand: (applicationId, commandId, options) => fetch({
            method: "DELETE",
            url: `/applications/${applicationId}/commands/${commandId}`,
            options,
        }),
        deleteGuild: (guildId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}`,
            options,
        }),
        deleteGuildApplicationCommand: (applicationId, guildId, commandId, options) => fetch({
            method: "DELETE",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`,
            options,
        }),
        deleteGuildEmoji: (guildId, emojiId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/emojis/${emojiId}`,
            options,
        }),
        deleteGuildIntegration: (guildId, integrationId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/integrations/${integrationId}`,
            options,
        }),
        deleteGuildRole: (guildId, roleId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/roles/${roleId}`,
            options,
        }),
        deleteGuildScheduledEvent: (guildId, guildScheduledEventId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`,
            options,
        }),
        deleteGuildSticker: (guildId, stickerId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/stickers/${stickerId}`,
            options,
        }),
        deleteGuildTemplate: (guildId, templateCode, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/templates/${templateCode}`,
            options,
        }),
        deleteInvite: (inviteCode, options) => fetch({
            method: "DELETE",
            url: `/invites/${inviteCode}`,
            options,
        }),
        deleteMessage: (channelId, messageId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/messages/${messageId}`,
            options,
        }),
        deleteOriginalInteractionResponse: (applicationId, interactionToken, options) => fetch({
            method: "DELETE",
            url: `/webhooks/${applicationId}/${interactionToken}/messages/@original`,
            options,
        }),
        deleteOwnReaction: (channelId, messageId, emoji, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`,
            options,
        }),
        deleteStageInstance: (channelId, options) => fetch({
            method: "DELETE",
            url: `/stage-instances/${channelId}`,
            options,
        }),
        deleteUserReaction: (channelId, messageId, emoji, userId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`,
            options,
        }),
        deleteWebhook: (webhookId, options) => fetch({
            method: "DELETE",
            url: `/webhooks/${webhookId}`,
            options,
        }),
        deleteWebhookMessage: (webhookId, webhookToken, messageId, params, options) => fetch({
            method: "DELETE",
            url: `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`,
            params,
            options,
        }),
        deleteWebhookWithToken: (webhookId, webhookToken, options) => fetch({
            method: "DELETE",
            url: `/webhooks/${webhookId}/${webhookToken}`,
            options,
        }),
        editApplicationCommandPermissions: (applicationId, guildId, commandId, params, options) => fetch({
            method: "PUT",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`,
            params,
            options,
        }),
        editChannelPermissions: (channelId, overwriteId, params, options) => fetch({
            method: "PUT",
            url: `/channels/${channelId}/permissions/${overwriteId}`,
            params,
            options,
        }),
        editFollowupMessage: (applicationId, interactionToken, messageId, options) => fetch({
            method: "PATCH",
            url: `/webhooks/${applicationId}/${interactionToken}/messages/${messageId}`,
            options,
        }),
        editGlobalApplicationCommand: (applicationId, commandId, params, options) => fetch({
            method: "PATCH",
            url: `/applications/${applicationId}/commands/${commandId}`,
            params,
            options,
        }),
        editGuildApplicationCommand: (applicationId, guildId, commandId, params, options) => fetch({
            method: "PATCH",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`,
            params,
            options,
        }),
        editMessage: (channelId, messageId, params, options) => fetch({
            method: "PATCH",
            url: `/channels/${channelId}/messages/${messageId}`,
            params,
            options,
        }),
        editOriginalInteractionResponse: (applicationId, interactionToken, options) => fetch({
            method: "PATCH",
            url: `/webhooks/${applicationId}/${interactionToken}/messages/@original`,
            options,
        }),
        editWebhookMessage: (webhookId, webhookToken, messageId, params, options) => fetch({
            method: "PATCH",
            url: `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`,
            params,
            options,
        }),
        executeGitHubCompatibleWebhook: (webhookId, webhookToken, options) => fetch({
            method: "POST",
            url: `/webhooks/${webhookId}/${webhookToken}/github`,
            options,
        }),
        executeSlackCompatibleWebhook: (webhookId, webhookToken, options) => fetch({
            method: "POST",
            url: `/webhooks/${webhookId}/${webhookToken}/slack`,
            options,
        }),
        executeWebhook: (webhookId, webhookToken, params, options) => fetch({
            method: "POST",
            url: `/webhooks/${webhookId}/${webhookToken}`,
            params,
            options,
        }),
        followAnnouncementChannel: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/followers`,
            params,
            options,
        }),
        getApplicationCommandPermissions: (applicationId, guildId, commandId, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`,
            options,
        }),
        getApplicationRoleConnectionMetadataRecords: (applicationId, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/role-connections/metadata`,
            options,
        }),
        getAutoModerationRule: (guildId, autoModerationRuleId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/auto-moderation/rules/${autoModerationRuleId}`,
            options,
        }),
        getChannel: (channelId, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}`,
            options,
        }),
        getChannelInvites: (channelId, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/invites`,
            options,
        }),
        getChannelMessage: (channelId, messageId, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/messages/${messageId}`,
            options,
        }),
        getChannelMessages: (channelId, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/messages`,
            params,
            options,
        }),
        getChannelWebhooks: (channelId, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/webhooks`,
            options,
        }),
        getCurrentAuthorizationInformation: options => fetch({
            method: "GET",
            url: `/oauth2/@me`,
            options,
        }),
        getCurrentBotApplicationInformation: options => fetch({
            method: "GET",
            url: `/oauth2/applications/@me`,
            options,
        }),
        getCurrentUser: options => fetch({
            method: "GET",
            url: `/users/@me`,
            options,
        }),
        getCurrentUserGuildMember: (guildId, options) => fetch({
            method: "GET",
            url: `/users/@me/guilds/${guildId}/member`,
            options,
        }),
        getCurrentUserGuilds: (params, options) => fetch({
            method: "GET",
            url: `/users/@me/guilds`,
            params,
            options,
        }),
        getFollowupMessage: (applicationId, interactionToken, messageId, options) => fetch({
            method: "GET",
            url: `/webhooks/${applicationId}/${interactionToken}/messages/${messageId}`,
            options,
        }),
        getGateway: options => fetch({
            method: "GET",
            url: `/gateway`,
            options,
        }),
        getGatewayBot: options => fetch({
            method: "GET",
            url: `/gateway/bot`,
            options,
        }),
        getGlobalApplicationCommand: (applicationId, commandId, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/commands/${commandId}`,
            options,
        }),
        getGlobalApplicationCommands: (applicationId, params, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/commands`,
            params,
            options,
        }),
        getGuild: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}`,
            params,
            options,
        }),
        getGuildApplicationCommand: (applicationId, guildId, commandId, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`,
            options,
        }),
        getGuildApplicationCommandPermissions: (applicationId, guildId, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/guilds/${guildId}/commands/permissions`,
            options,
        }),
        getGuildApplicationCommands: (applicationId, guildId, params, options) => fetch({
            method: "GET",
            url: `/applications/${applicationId}/guilds/${guildId}/commands`,
            params,
            options,
        }),
        getGuildAuditLog: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/audit-logs`,
            params,
            options,
        }),
        getGuildBan: (guildId, userId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/bans/${userId}`,
            options,
        }),
        getGuildBans: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/bans`,
            params,
            options,
        }),
        getGuildChannels: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/channels`,
            options,
        }),
        getGuildEmoji: (guildId, emojiId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/emojis/${emojiId}`,
            options,
        }),
        getGuildIntegrations: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/integrations`,
            options,
        }),
        getGuildInvites: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/invites`,
            options,
        }),
        getGuildMember: (guildId, userId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/members/${userId}`,
            options,
        }),
        getGuildOnboarding: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/onboarding`,
            options,
        }),
        getGuildPreview: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/preview`,
            options,
        }),
        getGuildPruneCount: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/prune`,
            params,
            options,
        }),
        getGuildRoles: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/roles`,
            options,
        }),
        getGuildScheduledEvent: (guildId, guildScheduledEventId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`,
            params,
            options,
        }),
        getGuildScheduledEventUsers: (guildId, guildScheduledEventId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`,
            params,
            options,
        }),
        getGuildSticker: (guildId, stickerId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/stickers/${stickerId}`,
            options,
        }),
        getGuildTemplate: (templateCode, options) => fetch({
            method: "GET",
            url: `/guilds/templates/${templateCode}`,
            options,
        }),
        getGuildTemplates: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/templates`,
            options,
        }),
        getGuildVanityUrl: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/vanity-url`,
            options,
        }),
        getGuildVoiceRegions: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/regions`,
            options,
        }),
        getGuildWebhooks: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/webhooks`,
            options,
        }),
        getGuildWelcomeScreen: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/welcome-screen`,
            options,
        }),
        getGuildWidget: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/widget.json`,
            options,
        }),
        getGuildWidgetImage: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/widget.png`,
            params,
            options,
        }),
        getGuildWidgetSettings: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/widget`,
            options,
        }),
        getInvite: (inviteCode, params, options) => fetch({
            method: "GET",
            url: `/invites/${inviteCode}`,
            params,
            options,
        }),
        getOriginalInteractionResponse: (applicationId, interactionToken, options) => fetch({
            method: "GET",
            url: `/webhooks/${applicationId}/${interactionToken}/messages/@original`,
            options,
        }),
        getPinnedMessages: (channelId, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/pins`,
            options,
        }),
        getReactions: (channelId, messageId, emoji, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`,
            params,
            options,
        }),
        getStageInstance: (channelId, options) => fetch({
            method: "GET",
            url: `/stage-instances/${channelId}`,
            options,
        }),
        getSticker: (stickerId, options) => fetch({
            method: "GET",
            url: `/stickers/${stickerId}`,
            options,
        }),
        getThreadMember: (channelId, userId, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/thread-members/${userId}`,
            params,
            options,
        }),
        getUser: (userId, options) => fetch({
            method: "GET",
            url: `/users/${userId}`,
            options,
        }),
        getUserApplicationRoleConnection: (applicationId, options) => fetch({
            method: "GET",
            url: `/users/@me/applications/${applicationId}/role-connection`,
            options,
        }),
        getUserConnections: options => fetch({
            method: "GET",
            url: `/users/@me/connections`,
            options,
        }),
        getWebhook: (webhookId, options) => fetch({
            method: "GET",
            url: `/webhooks/${webhookId}`,
            options,
        }),
        getWebhookMessage: (webhookId, webhookToken, messageId, params, options) => fetch({
            method: "GET",
            url: `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`,
            params,
            options,
        }),
        getWebhookWithToken: (webhookId, webhookToken, options) => fetch({
            method: "GET",
            url: `/webhooks/${webhookId}/${webhookToken}`,
            options,
        }),
        groupDmAddRecipient: (channelId, userId, params, options) => fetch({
            method: "PUT",
            url: `/channels/${channelId}/recipients/${userId}`,
            params,
            options,
        }),
        groupDmRemoveRecipient: (channelId, userId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/recipients/${userId}`,
            options,
        }),
        joinThread: (channelId, options) => fetch({
            method: "PUT",
            url: `/channels/${channelId}/thread-members/@me`,
            options,
        }),
        leaveGuild: (guildId, options) => fetch({
            method: "DELETE",
            url: `/users/@me/guilds/${guildId}`,
            options,
        }),
        leaveThread: (channelId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/thread-members/@me`,
            options,
        }),
        listActiveGuildThreads: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/threads/active`,
            options,
        }),
        listAutoModerationRulesForGuild: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/auto-moderation/rules`,
            options,
        }),
        listGuildEmojis: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/emojis`,
            options,
        }),
        listGuildMembers: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/members`,
            params,
            options,
        }),
        listGuildStickers: (guildId, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/stickers`,
            options,
        }),
        listJoinedPrivateArchivedThreads: (channelId, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/users/@me/threads/archived/private`,
            params,
            options,
        }),
        listNitroStickerPacks: options => fetch({
            method: "GET",
            url: `/sticker-packs`,
            options,
        }),
        listPrivateArchivedThreads: (channelId, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/threads/archived/private`,
            params,
            options,
        }),
        listPublicArchivedThreads: (channelId, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/threads/archived/public`,
            params,
            options,
        }),
        listScheduledEventsForGuild: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/scheduled-events`,
            params,
            options,
        }),
        listThreadMembers: (channelId, params, options) => fetch({
            method: "GET",
            url: `/channels/${channelId}/thread-members`,
            params,
            options,
        }),
        listVoiceRegions: options => fetch({
            method: "GET",
            url: `/voice/regions`,
            options,
        }),
        modifyAutoModerationRule: (guildId, autoModerationRuleId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/auto-moderation/rules/${autoModerationRuleId}`,
            params,
            options,
        }),
        modifyChannel: (channelId, params, options) => fetch({
            method: "PATCH",
            url: `/channels/${channelId}`,
            params,
            options,
        }),
        modifyCurrentMember: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/members/@me`,
            params,
            options,
        }),
        modifyCurrentUser: (params, options) => fetch({
            method: "PATCH",
            url: `/users/@me`,
            params,
            options,
        }),
        modifyCurrentUserNick: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/members/@me/nick`,
            params,
            options,
        }),
        modifyCurrentUserVoiceState: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/voice-states/@me`,
            params,
            options,
        }),
        modifyGuild: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}`,
            params,
            options,
        }),
        modifyGuildChannelPositions: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/channels`,
            params,
            options,
        }),
        modifyGuildEmoji: (guildId, emojiId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/emojis/${emojiId}`,
            params,
            options,
        }),
        modifyGuildMember: (guildId, userId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/members/${userId}`,
            params,
            options,
        }),
        modifyGuildMfaLevel: (guildId, params, options) => fetch({
            method: "POST",
            url: `/guilds/${guildId}/mfa`,
            params,
            options,
        }),
        modifyGuildRole: (guildId, roleId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/roles/${roleId}`,
            params,
            options,
        }),
        modifyGuildRolePositions: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/roles`,
            params,
            options,
        }),
        modifyGuildScheduledEvent: (guildId, guildScheduledEventId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`,
            params,
            options,
        }),
        modifyGuildSticker: (guildId, stickerId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/stickers/${stickerId}`,
            params,
            options,
        }),
        modifyGuildTemplate: (guildId, templateCode, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/templates/${templateCode}`,
            params,
            options,
        }),
        modifyGuildWelcomeScreen: (guildId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/welcome-screen`,
            params,
            options,
        }),
        modifyGuildWidget: (guildId, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/widget`,
            options,
        }),
        modifyStageInstance: (channelId, params, options) => fetch({
            method: "PATCH",
            url: `/stage-instances/${channelId}`,
            params,
            options,
        }),
        modifyUserVoiceState: (guildId, userId, params, options) => fetch({
            method: "PATCH",
            url: `/guilds/${guildId}/voice-states/${userId}`,
            params,
            options,
        }),
        modifyWebhook: (webhookId, params, options) => fetch({
            method: "PATCH",
            url: `/webhooks/${webhookId}`,
            params,
            options,
        }),
        modifyWebhookWithToken: (webhookId, webhookToken, options) => fetch({
            method: "PATCH",
            url: `/webhooks/${webhookId}/${webhookToken}`,
            options,
        }),
        pinMessage: (channelId, messageId, options) => fetch({
            method: "PUT",
            url: `/channels/${channelId}/pins/${messageId}`,
            options,
        }),
        removeGuildBan: (guildId, userId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/bans/${userId}`,
            options,
        }),
        removeGuildMember: (guildId, userId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/members/${userId}`,
            options,
        }),
        removeGuildMemberRole: (guildId, userId, roleId, options) => fetch({
            method: "DELETE",
            url: `/guilds/${guildId}/members/${userId}/roles/${roleId}`,
            options,
        }),
        removeThreadMember: (channelId, userId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/thread-members/${userId}`,
            options,
        }),
        searchGuildMembers: (guildId, params, options) => fetch({
            method: "GET",
            url: `/guilds/${guildId}/members/search`,
            params,
            options,
        }),
        startThreadFromMessage: (channelId, messageId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/messages/${messageId}/threads`,
            params,
            options,
        }),
        startThreadInForumChannel: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/threads`,
            params,
            options,
        }),
        startThreadWithoutMessage: (channelId, params, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/threads`,
            params,
            options,
        }),
        syncGuildTemplate: (guildId, templateCode, options) => fetch({
            method: "PUT",
            url: `/guilds/${guildId}/templates/${templateCode}`,
            options,
        }),
        triggerTypingIndicator: (channelId, options) => fetch({
            method: "POST",
            url: `/channels/${channelId}/typing`,
            options,
        }),
        unpinMessage: (channelId, messageId, options) => fetch({
            method: "DELETE",
            url: `/channels/${channelId}/pins/${messageId}`,
            options,
        }),
        updateApplicationRoleConnectionMetadataRecords: (applicationId, options) => fetch({
            method: "PUT",
            url: `/applications/${applicationId}/role-connections/metadata`,
            options,
        }),
        updateUserApplicationRoleConnection: (applicationId, params, options) => fetch({
            method: "PUT",
            url: `/users/@me/applications/${applicationId}/role-connection`,
            params,
            options,
        }),
    };
}
export const GatewayIntents = {
    GUILDS: 1 << 0,
    GUILD_MEMBERS: 1 << 1,
    GUILD_MODERATION: 1 << 2,
    GUILD_EMOJIS_AND_STICKERS: 1 << 3,
    GUILD_INTEGRATIONS: 1 << 4,
    GUILD_WEBHOOKS: 1 << 5,
    GUILD_INVITES: 1 << 6,
    GUILD_VOICE_STATES: 1 << 7,
    GUILD_PRESENCES: 1 << 8,
    GUILD_MESSAGES: 1 << 9,
    GUILD_MESSAGE_REACTIONS: 1 << 10,
    GUILD_MESSAGE_TYPING: 1 << 11,
    DIRECT_MESSAGES: 1 << 12,
    DIRECT_MESSAGE_REACTIONS: 1 << 13,
    DIRECT_MESSAGE_TYPING: 1 << 14,
    MESSAGE_CONTENT: 1 << 15,
    GUILD_SCHEDULED_EVENTS: 1 << 16,
    AUTO_MODERATION_CONFIGURATION: 1 << 20,
    AUTO_MODERATION_EXECUTION: 1 << 21,
};
export const GuildMemberFlag = {
    /** Member has left and rejoined the guild */
    DID_REJOIN: 1 << 0,
    /** Member has completed onboarding */
    COMPLETED_ONBOARDING: 1 << 1,
    /** Member is exempt from guild verification requirements */
    BYPASSES_VERIFICATION: 1 << 2,
    /** Member has started onboarding */
    STARTED_ONBOARDING: 1 << 3,
};
export const MessageFlag = {
    /** this message has been published to subscribed channels (via Channel Following) */
    CROSSPOSTED: 1 << 0,
    /** this message originated from a message in another channel (via Channel Following) */
    IS_CROSSPOST: 1 << 1,
    /** do not include any embeds when serializing this message */
    SUPPRESS_EMBEDS: 1 << 2,
    /** the source message for this crosspost has been deleted (via Channel Following) */
    SOURCE_MESSAGE_DELETED: 1 << 3,
    /** this message came from the urgent message system */
    URGENT: 1 << 4,
    /** this message has an associated thread, with the same id as the message */
    HAS_THREAD: 1 << 5,
    /** this message is only visible to the user who invoked the Interaction */
    EPHEMERAL: 1 << 6,
    /** this message is an Interaction Response and the bot is "thinking" */
    LOADING: 1 << 7,
    /** this message failed to mention some roles and add their members to the thread */
    FAILED_TO_MENTION_SOME_ROLES_IN_THREAD: 1 << 8,
    /** this message will not trigger push and desktop notifications */
    SUPPRESS_NOTIFICATIONS: 1 << 12,
};
export const PermissionFlag = {
    /** Allows creation of instant invites */
    CREATE_INSTANT_INVITE: BigInt(1) << BigInt(0),
    /** Allows kicking members */
    KICK_MEMBERS: BigInt(1) << BigInt(1),
    /** Allows banning members */
    BAN_MEMBERS: BigInt(1) << BigInt(2),
    /** Allows all permissions and bypasses channel permission overwrites */
    ADMINISTRATOR: BigInt(1) << BigInt(3),
    /** Allows management and editing of channels */
    MANAGE_CHANNELS: BigInt(1) << BigInt(4),
    /** Allows management and editing of the guild */
    MANAGE_GUILD: BigInt(1) << BigInt(5),
    /** Allows for the addition of reactions to messages */
    ADD_REACTIONS: BigInt(1) << BigInt(6),
    /** Allows for viewing of audit logs */
    VIEW_AUDIT_LOG: BigInt(1) << BigInt(7),
    /** Allows for using priority speaker in a voice channel */
    PRIORITY_SPEAKER: BigInt(1) << BigInt(8),
    /** Allows the user to go live */
    STREAM: BigInt(1) << BigInt(9),
    /** Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels */
    VIEW_CHANNEL: BigInt(1) << BigInt(10),
    /** Allows for sending messages in a channel and creating threads in a forum (does not allow sending messages in threads) */
    SEND_MESSAGES: BigInt(1) << BigInt(11),
    /** Allows for sending of /tts messages */
    SEND_TTS_MESSAGES: BigInt(1) << BigInt(12),
    /** Allows for deletion of other users messages */
    MANAGE_MESSAGES: BigInt(1) << BigInt(13),
    /** Links sent by users with this permission will be auto-embedded */
    EMBED_LINKS: BigInt(1) << BigInt(14),
    /** Allows for uploading images and files */
    ATTACH_FILES: BigInt(1) << BigInt(15),
    /** Allows for reading of message history */
    READ_MESSAGE_HISTORY: BigInt(1) << BigInt(16),
    /** Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify all online users in a channel */
    MENTION_EVERYONE: BigInt(1) << BigInt(17),
    /** Allows the usage of custom emojis from other servers */
    USE_EXTERNAL_EMOJIS: BigInt(1) << BigInt(18),
    /** Allows for viewing guild insights */
    VIEW_GUILD_INSIGHTS: BigInt(1) << BigInt(19),
    /** Allows for joining of a voice channel */
    CONNECT: BigInt(1) << BigInt(20),
    /** Allows for speaking in a voice channel */
    SPEAK: BigInt(1) << BigInt(21),
    /** Allows for muting members in a voice channel */
    MUTE_MEMBERS: BigInt(1) << BigInt(22),
    /** Allows for deafening of members in a voice channel */
    DEAFEN_MEMBERS: BigInt(1) << BigInt(23),
    /** Allows for moving of members between voice channels */
    MOVE_MEMBERS: BigInt(1) << BigInt(24),
    /** Allows for using voice-activity-detection in a voice channel */
    USE_VAD: BigInt(1) << BigInt(25),
    /** Allows for modification of own nickname */
    CHANGE_NICKNAME: BigInt(1) << BigInt(26),
    /** Allows for modification of other users nicknames */
    MANAGE_NICKNAMES: BigInt(1) << BigInt(27),
    /** Allows management and editing of roles */
    MANAGE_ROLES: BigInt(1) << BigInt(28),
    /** Allows management and editing of webhooks */
    MANAGE_WEBHOOKS: BigInt(1) << BigInt(29),
    /** Allows management and editing of emojis, stickers, and soundboard sounds */
    MANAGE_GUILD_EXPRESSIONS: BigInt(1) << BigInt(30),
    /** Allows members to use application commands, including slash commands and context menu commands. */
    USE_APPLICATION_COMMANDS: BigInt(1) << BigInt(31),
    /** Allows for requesting to speak in stage channels. (This permission is under active development and may be changed or removed.) */
    REQUEST_TO_SPEAK: BigInt(1) << BigInt(32),
    /** Allows for creating, editing, and deleting scheduled events */
    MANAGE_EVENTS: BigInt(1) << BigInt(33),
    /** Allows for deleting and archiving threads, and viewing all private threads */
    MANAGE_THREADS: BigInt(1) << BigInt(34),
    /** Allows for creating public and announcement threads */
    CREATE_PUBLIC_THREADS: BigInt(1) << BigInt(35),
    /** Allows for creating private threads */
    CREATE_PRIVATE_THREADS: BigInt(1) << BigInt(36),
    /** Allows the usage of custom stickers from other servers */
    USE_EXTERNAL_STICKERS: BigInt(1) << BigInt(37),
    /** Allows for sending messages in threads */
    SEND_MESSAGES_IN_THREADS: BigInt(1) << BigInt(38),
    /** Allows for using Activities (applications with the EMBEDDED flag) in a voice channel */
    USE_EMBEDDED_ACTIVITIES: BigInt(1) << BigInt(39),
    /** Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels */
    MODERATE_MEMBERS: BigInt(1) << BigInt(40),
    /** Allows for viewing role subscription insights */
    VIEW_CREATOR_MONETIZATION_ANALYTICS: BigInt(1) << BigInt(41),
    /** Allows for using soundboard in a voice channel */
    USE_SOUNDBOARD: BigInt(1) << BigInt(42),
};
export const SystemChannelFlag = {
    /** Suppress member join notifications */
    SUPPRESS_JOIN_NOTIFICATIONS: 1 << 0,
    /** Suppress server boost notifications */
    SUPPRESS_PREMIUM_SUBSCRIPTIONS: 1 << 1,
    /** Suppress server setup tips */
    SUPPRESS_GUILD_REMINDER_NOTIFICATIONS: 1 << 2,
    /** Hide member join sticker reply buttons */
    SUPPRESS_JOIN_NOTIFICATION_REPLIES: 1 << 3,
    /** Suppress role subscription purchase and renewal notifications */
    SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS: 1 << 4,
    /** Hide role subscription sticker reply buttons */
    SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES: 1 << 5,
};
export const UserFlag = {
    /** Discord Employee */
    STAFF: 1 << 0,
    /** Partnered Server Owner */
    PARTNER: 1 << 1,
    /** HypeSquad Events Member */
    HYPESQUAD: 1 << 2,
    /** Bug Hunter Level 1 */
    BUG_HUNTER_LEVEL_1: 1 << 3,
    /** House Bravery Member */
    HYPESQUAD_ONLINE_HOUSE_1: 1 << 6,
    /** House Brilliance Member */
    HYPESQUAD_ONLINE_HOUSE_2: 1 << 7,
    /** House Balance Member */
    HYPESQUAD_ONLINE_HOUSE_3: 1 << 8,
    /** Early Nitro Supporter */
    PREMIUM_EARLY_SUPPORTER: 1 << 9,
    /** User is a team */
    TEAM_PSEUDO_USER: 1 << 10,
    /** Bug Hunter Level 2 */
    BUG_HUNTER_LEVEL_2: 1 << 14,
    /** Verified Bot */
    VERIFIED_BOT: 1 << 16,
    /** Early Verified Bot Developer */
    VERIFIED_DEVELOPER: 1 << 17,
    /** Moderator Programs Alumni */
    CERTIFIED_MODERATOR: 1 << 18,
    /** Bot uses only HTTP interactions and is shown in the online member list */
    BOT_HTTP_INTERACTIONS: 1 << 19,
    /** User is an Active Developer */
    ACTIVE_DEVELOPER: 1 << 22,
};
//# sourceMappingURL=types.js.map