import * as tsplus_module_1 from "@effect/stream/Stream";
import * as tsplus_module_2 from "@effect/io/Effect";
export * from "./Cache/driver.js";
export { create as memoryDriver, createWithParent as memoryParentDriver, } from "./Cache/memory.js";
export { create as memoryTTLDriver, createWithParent as memoryTTLParentDriver, } from "./Cache/memoryTTL.js";
export const makeWithParent = ({ driver, ops = tsplus_module_1.empty, onMiss, onParentMiss, }) => {
    const sync = tsplus_module_1.runDrain(tsplus_module_1.tap(ops, (op) => {
        switch (op.op) {
            case "create":
            case "update":
                return driver.set(op.parentId, op.resourceId, op.resource);
            case "delete":
                return driver.delete(op.parentId, op.resourceId);
            case "parentDelete":
                return driver.parentDelete(op.parentId);
        }
    }));
    return {
        ...driver,
        get: (parentId, id) => tsplus_module_2.someOrElseEffect(driver
            .get(parentId, id), () => tsplus_module_2.tap(onMiss(parentId, id), a => driver.set(parentId, id, a))),
        getForParent: (parentId) => tsplus_module_2.someOrElseEffect(driver.getForParent(parentId), () => tsplus_module_2.map(tsplus_module_2.tap(onParentMiss(parentId), entries => tsplus_module_2.collectAllPar(entries.map(([id, a]) => driver.set(parentId, id, a)))), entries => new Map(entries))),
        run: tsplus_module_2.asUnit(tsplus_module_2.zipPar(sync, driver.run)),
    };
};
export const make = ({ driver, ops = tsplus_module_1.empty, onMiss, }) => {
    const sync = tsplus_module_1.runDrain(tsplus_module_1.tap(ops, (op) => {
        switch (op.op) {
            case "create":
            case "update":
                return driver.set(op.resourceId, op.resource);
            case "delete":
                return driver.delete(op.resourceId);
        }
    }));
    return {
        ...driver,
        get: (id) => tsplus_module_2.someOrElseEffect(driver
            .get(id), () => tsplus_module_2.tap(onMiss(id), a => driver.set(id, a))),
        run: tsplus_module_2.asUnit(tsplus_module_2.zipPar(sync, driver.run)),
    };
};
export class CacheMissError {
    cacheName;
    id;
    _tag = "CacheMissError";
    constructor(cacheName, id) {
        this.cacheName = cacheName;
        this.id = id;
    }
}
//# sourceMappingURL=Cache.js.map