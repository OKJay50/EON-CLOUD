import { Stream, Discord, Hub, Effect } from "dfx/_common";
import { Sharder } from "./DiscordGateway/Sharder.js";
export declare const make: import("@effect-http/client/_common").Effect<Sharder, never, {
    run: import("@effect-http/client/_common").Effect<never, never, never>;
    dispatch: import("@effect-http/client/_common").Stream<never, never, import("./types.js").GatewayPayload<import("./types.js").ReceiveEvent>>;
    fromDispatch: <K extends keyof import("./types.js").ReceiveEvents>(event: K) => import("@effect-http/client/_common").Stream<never, never, import("./types.js").ReceiveEvents[K]>;
    handleDispatch: <K_1 extends keyof import("./types.js").ReceiveEvents, R, E, A>(event: K_1, handle: (event: import("./types.js").ReceiveEvents[K_1]) => import("@effect-http/client/_common").Effect<R, E, A>) => import("@effect-http/client/_common").Effect<R, E, void>;
}>;
export interface DiscordGateway extends Effect.Success<typeof make> {
}
export declare const DiscordGateway: import("@effect/data/Context").Tag<DiscordGateway, DiscordGateway>;
export declare const LiveDiscordGateway: import("@effect-http/client/_common").Layer<import("./DiscordREST.js").DiscordREST | import("./DiscordConfig.js").DiscordConfig | import("./DiscordGateway/ShardStore.js").ShardStore | import("./Log.js").Log | import("./DiscordGateway/DiscordWS.js").DiscordWSCodec | import("./RateLimit.js").RateLimitStore, never, DiscordGateway>;
