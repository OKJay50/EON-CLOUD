import * as tsplus_module_1 from "@effect/stream/Stream";
import * as tsplus_module_2 from "@effect/io/Effect";
import { DiscordREST } from "dfx";
import { Gateway } from "dfx/gateway";
import { CacheMissError, make, makeWithParent, } from "../Cache.js";
export const opsWithParent = ({ id, fromParent, create, update, remove, parentRemove, }) => {
    const fromParentOps = tsplus_module_1.flatMap(fromParent, ([parentId, a]) => tsplus_module_1.fromIterable(a.map((resource) => ({
        op: "create",
        parentId,
        resourceId: id(resource),
        resource,
    }))));
    const createOps = tsplus_module_1.map(create, ([parentId, resource]) => ({
        op: "create",
        parentId,
        resourceId: id(resource),
        resource,
    }));
    const updateOps = tsplus_module_1.map(update, ([parentId, resource]) => ({
        op: "update",
        parentId,
        resourceId: id(resource),
        resource,
    }));
    const removeOps = tsplus_module_1.map(remove, ([parentId, resourceId]) => ({
        op: "delete",
        parentId,
        resourceId,
    }));
    const parentRemoveOps = tsplus_module_1.map(parentRemove, (parentId) => ({
        op: "parentDelete",
        parentId,
    }));
    return tsplus_module_1.merge(tsplus_module_1.merge(tsplus_module_1.merge(tsplus_module_1.merge(fromParentOps, createOps), updateOps), removeOps), parentRemoveOps);
};
export const ops = ({ id, create, update, remove }) => {
    const createOps = tsplus_module_1.map(create, (resource) => ({
        op: "create",
        resourceId: id(resource),
        resource,
    }));
    const updateOps = tsplus_module_1.map(update, (resource) => ({
        op: "update",
        resourceId: id(resource),
        resource,
    }));
    const removeOps = tsplus_module_1.map(remove, (resourceId) => ({
        op: "delete",
        resourceId,
    }));
    return tsplus_module_1.merge(tsplus_module_1.merge(createOps, updateOps), removeOps);
};
export const guilds = (makeDriver) => tsplus_module_2.flatMap(makeDriver, driver => tsplus_module_2.flatMap(Gateway.DiscordGateway, gateway => tsplus_module_2.map(DiscordREST, rest => make({
    driver,
    ops: ops({
        id: (g) => g.id,
        create: tsplus_module_1.map(gateway.fromDispatch("GUILD_CREATE"), g => ({
            ...g,
            channels: [],
            roles: [],
            emojis: [],
            members: [],
        })),
        update: gateway.fromDispatch("GUILD_UPDATE"),
        remove: tsplus_module_1.map(gateway.fromDispatch("GUILD_DELETE"), a => a.id),
    }),
    onMiss: id => tsplus_module_2.flatMap(rest.getGuild(id), r => r.json),
}))));
export const channels = (makeDriver) => tsplus_module_2.flatMap(makeDriver, driver => tsplus_module_2.flatMap(Gateway.DiscordGateway, gateway => tsplus_module_2.map(DiscordREST, rest => makeWithParent({
    driver,
    ops: opsWithParent({
        id: (a) => a.id,
        fromParent: tsplus_module_1.map(gateway
            .fromDispatch("GUILD_CREATE"), g => [g.id, g.channels]),
        create: tsplus_module_1.map(gateway
            .fromDispatch("CHANNEL_CREATE"), c => [c.guild_id, c]),
        update: tsplus_module_1.map(gateway
            .fromDispatch("CHANNEL_UPDATE"), c => [c.guild_id, c]),
        remove: tsplus_module_1.map(gateway
            .fromDispatch("CHANNEL_DELETE"), a => [a.guild_id, a.id]),
        parentRemove: tsplus_module_1.map(gateway.fromDispatch("GUILD_DELETE"), g => g.id),
    }),
    onMiss: id => tsplus_module_2.flatMap(rest.getChannel(id), r => r.json),
    onParentMiss: guildId => tsplus_module_2.map(tsplus_module_2.flatMap(rest
        .getGuildChannels(guildId), r => r.json), a => a.map(a => [a.id, a])),
}))));
export const roles = (makeDriver) => tsplus_module_2.flatMap(makeDriver, driver => tsplus_module_2.flatMap(Gateway.DiscordGateway, gateway => tsplus_module_2.map(DiscordREST, rest => makeWithParent({
    driver,
    ops: opsWithParent({
        id: (a) => a.id,
        fromParent: tsplus_module_1.map(gateway
            .fromDispatch("GUILD_CREATE"), g => [g.id, g.roles]),
        create: tsplus_module_1.map(gateway
            .fromDispatch("GUILD_ROLE_CREATE"), r => [r.guild_id, r.role]),
        update: tsplus_module_1.map(gateway
            .fromDispatch("GUILD_ROLE_UPDATE"), r => [r.guild_id, r.role]),
        remove: tsplus_module_1.map(gateway
            .fromDispatch("GUILD_ROLE_DELETE"), a => [a.guild_id, a.role_id]),
        parentRemove: tsplus_module_1.map(gateway.fromDispatch("GUILD_DELETE"), g => g.id),
    }),
    onMiss: id => tsplus_module_2.fail(new CacheMissError("RolesCache", id)),
    onParentMiss: guildId => tsplus_module_2.map(tsplus_module_2.flatMap(rest
        .getGuildRoles(guildId), r => r.json), a => a.map(a => [a.id, a])),
}))));
//# sourceMappingURL=prelude.js.map