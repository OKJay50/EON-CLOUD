import { Effect, Maybe } from "dfx/_common";
export interface ParentCacheDriver<E, T> {
    readonly size: Effect<never, E, number>;
    sizeForParent: (parentId: string) => Effect<never, E, number>;
    get: (parentId: string, resourceId: string) => Effect<never, E, Maybe<T>>;
    getForParent: (parentId: string) => Effect<never, E, Maybe<ReadonlyMap<string, T>>>;
    set: (parentId: string, resourceId: string, resource: T) => Effect<never, E, void>;
    delete: (parentId: string, resourceId: string) => Effect<never, E, void>;
    parentDelete: (parentId: string) => Effect<never, E, void>;
    refreshTTL: (parentId: string, resourceId: string) => Effect<never, E, void>;
    readonly run: Effect<never, E, void>;
}
export declare const createParentDriver: <E, T>(driver: ParentCacheDriver<E, T>) => ParentCacheDriver<E, T>;
export interface CacheDriver<E, T> {
    readonly size: Effect<never, E, number>;
    get: (resourceId: string) => Effect<never, E, Maybe<T>>;
    set: (resourceId: string, resource: T) => Effect<never, E, void>;
    delete: (resourceId: string) => Effect<never, E, void>;
    refreshTTL: (resourceId: string) => Effect<never, E, void>;
    readonly run: Effect<never, E, void>;
}
export declare const createDriver: <E, T>(driver: CacheDriver<E, T>) => CacheDriver<E, T>;
