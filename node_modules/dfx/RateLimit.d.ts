import { Effect, Maybe, Duration } from "dfx/_common";
export type BucketDetails = {
    key: "global" | string;
    resetAfter: number;
    limit: number;
};
export interface RateLimitStore {
    hasBucket: (bucketKey: string) => Effect<never, never, boolean>;
    putBucket: (bucket: BucketDetails) => Effect<never, never, void>;
    getBucketForRoute: (route: string) => Effect<never, never, Maybe<BucketDetails>>;
    putBucketRoute: (route: string, bucketKey: string) => Effect<never, never, void>;
    incrementCounter: (key: string, window: number, limit: number) => Effect<never, never, readonly [count: number, ttl: number]>;
    removeCounter: (key: string) => Effect<never, never, void>;
}
export declare const RateLimitStore: import("@effect/data/Context").Tag<RateLimitStore, RateLimitStore>;
export declare const LiveMemoryRateLimitStore: import("@effect-http/client/_common").Layer<never, never, RateLimitStore>;
declare const makeLimiter: import("@effect-http/client/_common").Effect<import("./Log.js").Log | RateLimitStore, never, {
    maybeWait: (key: string, window: Duration, limit: number, multiplier?: number) => import("@effect-http/client/_common").Effect<never, never, void>;
}>;
export interface RateLimiter extends Effect.Success<typeof makeLimiter> {
}
export declare const RateLimiter: import("@effect/data/Context").Tag<RateLimiter, RateLimiter>;
export declare const LiveRateLimiter: import("@effect-http/client/_common").Layer<import("./Log.js").Log | RateLimitStore, never, RateLimiter>;
export {};
