import * as tsplus_module_1 from "@effect/data/Option";
import * as tsplus_module_2 from "@effect/data/Duration";
const majorResources = ["channels", "guilds", "webhooks"];
export const routeFromConfig = (path, method) => {
    // Only keep major ID's
    const routeURL = path
        .split("?")[0]
        .replace(/\/([A-Za-z]+)\/(\d{16,21}|@me)/g, (match, resource) => majorResources.includes(resource) ? match : `/${resource}`)
        // Strip reactions
        .replace(/\/reactions\/(.*)/, "/reactions");
    return `${method}-${routeURL}`;
};
export const numberHeader = (headers) => (key) => tsplus_module_1.filter(n => !isNaN(n))(tsplus_module_1.map(tsplus_module_1.fromNullable(headers.get(key)), parseFloat));
export const retryAfter = (headers) => tsplus_module_1.map(tsplus_module_1.orElse(numberHeader(headers)("x-ratelimit-reset-after"), () => numberHeader(headers)("retry-after")), tsplus_module_2.seconds);
export const rateLimitFromHeaders = (headers) => tsplus_module_1.struct({
    bucket: tsplus_module_1.fromNullable(headers.get("x-ratelimit-bucket")),
    retryAfter: retryAfter(headers),
    limit: numberHeader(headers)("x-ratelimit-limit"),
    remaining: numberHeader(headers)("x-ratelimit-remaining"),
});
//# sourceMappingURL=utils.js.map