export type Flags<T extends number | bigint> = Record<string, T>;
/**
 * Returns all the flags OR'ed together.
 */
export declare function all(flags: Flags<number>): number;
export declare function all(flags: Flags<bigint>): bigint;
/**
 * Returns a function that converts a bitfield to a list of flag names.
 */
export declare function toList<T extends Flags<number>>(flags: T): (bitfield: number) => (keyof T)[];
export declare function toList<T extends Flags<bigint>>(flags: T): (bitfield: bigint) => (keyof T)[];
/**
 * Returns a function that converts a list of flags names to a bigint bitfield.
 */
export declare const fromListBigint: <T extends Flags<bigint>>(flags: T) => (list: (keyof T)[]) => bigint;
/**
 * Returns a function that converts a list of flags names to a bitfield.
 */
export declare const fromList: <T extends Flags<number>>(flags: T) => (list: (keyof T)[]) => number;
/**
 * Checks if a bigint bitfield contains and a flag value.
 */
export declare const hasBigInt: (flag: bigint | string) => (bits: bigint | string) => boolean;
/**
 * Checks if a bitfield contains and a flag value.
 */
export declare const has: (flag: number | string) => (bits: number | string) => boolean;
