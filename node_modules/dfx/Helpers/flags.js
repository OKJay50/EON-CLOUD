export function all(flags) {
    return Object.values(flags).reduce((acc, flag) => acc | flag);
}
export function toList(flags) {
    const entries = Object.entries(flags);
    return val => entries.reduce((acc, [key, flag]) => ((val & flag) === flag ? [...acc, key] : acc), []);
}
/**
 * Returns a function that converts a list of flags names to a bigint bitfield.
 */
export const fromListBigint = (flags) => (list) => list.reduce((acc, key) => acc | flags[key], BigInt(0));
/**
 * Returns a function that converts a list of flags names to a bitfield.
 */
export const fromList = (flags) => (list) => list.reduce((acc, key) => acc | flags[key], 0);
/**
 * Checks if a bigint bitfield contains and a flag value.
 */
export const hasBigInt = (flag) => {
    const flagBigInt = BigInt(flag);
    return (bits) => {
        const bitsBigInt = BigInt(bits);
        return (bitsBigInt & flagBigInt) === flagBigInt;
    };
};
/**
 * Checks if a bitfield contains and a flag value.
 */
export const has = (flag) => {
    const flagNumber = +flag;
    return (bits) => {
        const bitsNumber = +bits;
        return (bitsNumber & flagNumber) === flagNumber;
    };
};
//# sourceMappingURL=flags.js.map