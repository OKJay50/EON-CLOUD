import * as tsplus_module_1 from "dfx/_common";
import * as tsplus_module_2 from "@effect/io/Layer";
import * as tsplus_module_3 from "@effect/data/Duration";
import * as tsplus_module_4 from "@effect/io/Schedule";
import * as tsplus_module_5 from "@effect/io/Effect";
import * as tsplus_module_6 from "dfx/gateway";
import * as tsplus_module_7 from "@effect/io/Ref";
import * as tsplus_module_8 from "dfx";
import { LiveWS } from "./WS.js";
export const DiscordWSCodec = tsplus_module_1.Tag();
export const LiveJsonDiscordWSCodec = tsplus_module_2.succeed(DiscordWSCodec, {
    type: "json",
    encode: p => JSON.stringify(p),
    decode: p => JSON.parse(p.toString("utf8")),
});
const make = tsplus_module_5.flatMap(tsplus_module_6.WS.WS, ws => tsplus_module_5.flatMap(DiscordWSCodec, encoding => tsplus_module_5.map(tsplus_module_8.Log.Log, log => {
    const connect = ({ url = "wss://gateway.discord.gg/", version = 10, outbound, }) => tsplus_module_5.flatMap(tsplus_module_7.make(`${url}?v=${version}&encoding=${encoding.type}`), urlRef => {
        const setUrl = (url) => tsplus_module_7.set(urlRef, `${url}?v=${version}&encoding=${encoding.type}`);
        const takeOutbound = tsplus_module_5.map(outbound, a => a === tsplus_module_6.WS.Reconnect ? a : encoding.encode(a));
        return tsplus_module_5.map(ws.connect(urlRef, takeOutbound), socket => {
            const take = tsplus_module_5.map(socket.take, encoding.decode);
            const run = tsplus_module_5.retry(tsplus_module_5.tapError(socket.run, e => log.info("DiscordWS", "ERROR", e)), tsplus_module_4.exponential(tsplus_module_3.seconds(0.5)));
            return {
                run,
                take,
                setUrl,
            };
        });
    });
    return { connect };
})));
export const DiscordWS = tsplus_module_1.Tag();
export const LiveDiscordWS = tsplus_module_2.provide(tsplus_module_5.toLayer(make, DiscordWS))(LiveWS);
//# sourceMappingURL=DiscordWS.js.map