import { Hub, Discord, Effect } from "dfx/_common";
import { DiscordWS } from "./DiscordWS.js";
export declare const make: import("@effect-http/client/_common").Effect<import("../DiscordConfig.js").DiscordConfig | DiscordWS | import("../RateLimit.js").RateLimiter, never, {
    readonly connect: (shard: [id: number, count: number], hub: Hub<Discord.GatewayPayload<Discord.ReceiveEvent>>) => import("@effect-http/client/_common").Effect<never, never, {
        readonly run: import("@effect-http/client/_common").Effect<never, never, never>;
        readonly send: (p: Discord.GatewayPayload) => import("@effect-http/client/_common").Effect<never, never, boolean>;
        readonly reconnect: import("@effect-http/client/_common").Effect<never, never, boolean>;
    }>;
}>;
export interface Shard extends Effect.Success<typeof make> {
}
export declare const Shard: import("@effect/data/Context").Tag<Shard, Shard>;
export declare const LiveShard: import("@effect-http/client/_common").Layer<import("../DiscordConfig.js").DiscordConfig | import("../Log.js").Log | import("./DiscordWS.js").DiscordWSCodec | import("../RateLimit.js").RateLimitStore, never, Shard>;
