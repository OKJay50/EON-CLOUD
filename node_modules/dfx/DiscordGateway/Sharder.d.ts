import { Effect, Discord, Hub } from "dfx/_common";
import { ShardStore } from "./ShardStore.js";
import { Shard } from "./Shard.js";
declare const make: import("@effect-http/client/_common").Effect<import("dfx").DiscordREST | import("../DiscordConfig.js").DiscordConfig | ShardStore | import("dfx").RateLimiter | Shard, never, {
    readonly run: (hub: Hub<Discord.GatewayPayload<Discord.ReceiveEvent>>) => import("@effect-http/client/_common").Effect<never, never, never>;
}>;
export interface Sharder extends Effect.Success<typeof make> {
}
export declare const Sharder: import("@effect/data/Context").Tag<Sharder, Sharder>;
export declare const LiveSharder: import("@effect-http/client/_common").Layer<import("dfx").DiscordREST | import("../DiscordConfig.js").DiscordConfig | ShardStore | import("../Log.js").Log | import("./DiscordWS.js").DiscordWSCodec | import("dfx").RateLimitStore, never, Sharder>;
export {};
