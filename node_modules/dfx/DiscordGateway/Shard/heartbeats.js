import * as tsplus_module_1 from "@effect/io/Ref";
import * as tsplus_module_2 from "@effect/data/Option";
import * as tsplus_module_3 from "@effect/io/Effect";
import * as tsplus_module_4 from "dfx/gateway";
import * as tsplus_module_5 from "@effect/io/Schedule";
import * as tsplus_module_6 from "dfx/utils/hub";
import { millis } from "@effect/data/Duration";
import * as SendEvents from "./sendEvents.js";
const payload = (ref, seqRef) => tsplus_module_3.tap(tsplus_module_3.map(tsplus_module_1.get(seqRef), a => SendEvents.heartbeat(tsplus_module_2.getOrNull(a))), () => tsplus_module_1.set(ref, false));
const payloadOrReconnect = (ref, seqRef) => tsplus_module_3.flatMap(tsplus_module_1.get(ref), (acked) => acked ? payload(ref, seqRef) : tsplus_module_3.succeed(tsplus_module_4.WS.Reconnect));
export const send = (hellos, acks, seqRef, send) => tsplus_module_3.flatMap(tsplus_module_1.make(true), ackedRef => {
    const heartbeats = tsplus_module_6.foreverSwitch(tsplus_module_3.tap(hellos
        .take(), () => tsplus_module_1.set(ackedRef, true)), p => tsplus_module_3.schedule(tsplus_module_3.tap(payloadOrReconnect(ackedRef, seqRef), send), tsplus_module_5.andThen(tsplus_module_5.duration(millis(p.d.heartbeat_interval * Math.random())), tsplus_module_5.fixed(millis(p.d.heartbeat_interval)))));
    const run = tsplus_module_3.forever(tsplus_module_3.tap(acks.take(), () => tsplus_module_1.set(ackedRef, true)));
    return tsplus_module_3.zipParLeft(run, heartbeats);
});
//# sourceMappingURL=heartbeats.js.map