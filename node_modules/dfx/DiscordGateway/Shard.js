import * as tsplus_module_1 from "dfx/gateway";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "dfx/_common";
import * as tsplus_module_4 from "@effect/io/Config/Secret";
import * as tsplus_module_5 from "@effect/io/Queue";
import * as tsplus_module_6 from "@effect/data/Option";
import * as tsplus_module_7 from "@effect/data/Duration";
import * as tsplus_module_8 from "dfx";
import * as tsplus_module_9 from "@effect/io/Layer";
import { DiscordWS, LiveDiscordWS } from "./DiscordWS.js";
import * as Heartbeats from "./Shard/heartbeats.js";
import * as Identify from "./Shard/identify.js";
import * as InvalidSession from "./Shard/invalidSession.js";
import * as Utils from "./Shard/utils.js";
export const make = tsplus_module_2.flatMap(tsplus_module_8.DiscordConfig.DiscordConfig, ({ token, gateway }) => tsplus_module_2.flatMap(tsplus_module_8.RateLimiter, limiter => tsplus_module_2.map(DiscordWS, dws => {
    const connect = (shard, hub) => tsplus_module_2.flatMap(tsplus_module_5.unbounded(), outboundQueue => {
        const outbound = tsplus_module_2.tap(outboundQueue
            .take(), () => limiter.maybeWait("dfx.shard.send", tsplus_module_7.minutes(1), 120));
        const send = (p) => outboundQueue.offer(p);
        return tsplus_module_2.flatMap(dws.connect({ outbound }), socket => tsplus_module_2.flatMap(Utils.latest(p => tsplus_module_6.map(tsplus_module_6.filter((p) => p.op === 0 /* Discord.GatewayOpcode.DISPATCH */ && p.t === "READY")(tsplus_module_6.some(p)), p => p.d)), ([latestReady, updateLatestReady]) => tsplus_module_2.flatMap(Utils.latest(p => tsplus_module_6.fromNullable(p.s)), ([latestSequence, updateLatestSequence]) => {
            const maybeUpdateUrl = (p) => tsplus_module_6.match(tsplus_module_6.map(tsplus_module_6.filter((p) => p.op === 0 /* Discord.GatewayOpcode.DISPATCH */ && p.t === "READY")(tsplus_module_6.some(p)), p => p.d), () => tsplus_module_2.unit(), a => socket.setUrl(a.resume_gateway_url));
            return tsplus_module_2.flatMap(tsplus_module_5.unbounded(), hellos => tsplus_module_2.map(tsplus_module_5.unbounded(), acks => {
                // heartbeats
                const heartbeats = Heartbeats.send(hellos, acks, latestSequence, send);
                // identify
                const identify = Identify.identifyOrResume({
                    token: tsplus_module_4.value(token),
                    shard,
                    intents: gateway.intents,
                    presence: gateway.presence,
                }, latestReady, latestSequence);
                const onPayload = (p) => tsplus_module_2.flatMap(tsplus_module_2.zipPar(tsplus_module_2.zipPar(updateLatestReady(p), updateLatestSequence(p)), maybeUpdateUrl(p)), () => {
                    let effect = tsplus_module_2.unit();
                    switch (p.op) {
                        case 10 /* Discord.GatewayOpcode.HELLO */:
                            effect = tsplus_module_2.zipPar(tsplus_module_2.tap(identify, send), hellos.offer(p));
                            break;
                        case 11 /* Discord.GatewayOpcode.HEARTBEAT_ACK */:
                            effect = acks.offer(p);
                            break;
                        case 9 /* Discord.GatewayOpcode.INVALID_SESSION */:
                            effect = tsplus_module_2.tap(InvalidSession.fromPayload(p, latestReady), send);
                            break;
                        case 0 /* Discord.GatewayOpcode.DISPATCH */:
                            effect = hub.publish(p);
                            break;
                    }
                    return tsplus_module_2.map(effect, () => void 0);
                });
                const run = tsplus_module_2.zipParLeft(tsplus_module_2.zipParLeft(tsplus_module_2.forever(tsplus_module_2.flatMap(socket.take, onPayload)), heartbeats), socket.run);
                return {
                    run,
                    send: (p) => send(p),
                    reconnect: send(tsplus_module_1.WS.Reconnect),
                };
            }));
        })));
    });
    return { connect };
})));
export const Shard = tsplus_module_3.Tag();
export const LiveShard = tsplus_module_9.provide(tsplus_module_2.toLayer(make, Shard))((tsplus_module_9.merge(tsplus_module_8.LiveRateLimiter)(LiveDiscordWS)));
//# sourceMappingURL=Shard.js.map