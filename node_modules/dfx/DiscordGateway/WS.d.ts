/// <reference types="node" resolution-mode="require"/>
/// <reference types="ws" />
import { Ref, Enqueue, Effect } from "dfx/_common";
import { Log } from "dfx";
import WebSocket from "isomorphic-ws";
export declare const Reconnect: unique symbol;
export type Reconnect = typeof Reconnect;
export type Message = string | Buffer | ArrayBuffer | Reconnect;
export declare class WebSocketError {
    readonly reason: unknown;
    readonly _tag = "WebSocketError";
    constructor(reason: unknown);
}
export declare class WebSocketCloseError {
    readonly code: number;
    readonly reason: string;
    readonly _tag = "WebSocketCloseError";
    constructor(code: number, reason: string);
}
declare const make: import("@effect-http/client/_common").Effect<import("../Log.js").Log, never, {
    readonly connect: (url: Ref<string>, takeOutbound: Effect<never, never, Message>) => import("@effect-http/client/_common").Effect<never, never, {
        readonly run: import("@effect-http/client/_common").Effect<never, WebSocketError | WebSocketCloseError, never>;
        readonly take: import("@effect-http/client/_common").Effect<never, never, WebSocket.Data>;
    }>;
}>;
export interface WS extends Effect.Success<typeof make> {
}
export declare const WS: import("@effect/data/Context").Tag<WS, WS>;
export declare const LiveWS: import("@effect-http/client/_common").Layer<import("../Log.js").Log, never, WS>;
export {};
