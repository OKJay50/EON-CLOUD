import * as tsplus_module_1 from "@effect/data/Option";
import * as tsplus_module_2 from "@effect/io/Effect";
export const make = () => {
    const buckets = new Map();
    const routes = new Map();
    const counters = new Map();
    const getCounter = (key) => tsplus_module_1.filter(c => c.expires > Date.now())(tsplus_module_1.fromNullable(counters.get(key)));
    const getBucketForRoute = (route) => tsplus_module_2.sync(() => tsplus_module_1.fromNullable(buckets.get(routes.get(route))));
    return {
        hasBucket: key => tsplus_module_2.sync(() => buckets.has(key)),
        putBucket: bucket => tsplus_module_2.sync(() => {
            buckets.set(bucket.key, bucket);
        }),
        getBucketForRoute,
        putBucketRoute: (route, bucket) => tsplus_module_2.sync(() => {
            routes.set(route, bucket);
        }),
        removeCounter: key => tsplus_module_2.sync(() => {
            counters.delete(key);
        }),
        incrementCounter: (key, window, limit) => tsplus_module_2.sync(() => {
            const now = Date.now();
            const perRequest = Math.ceil(window / limit);
            const counter = tsplus_module_1.getOrElse(getCounter(key), () => ({
                expires: now,
                count: 0,
            }));
            const count = counter.count + 1;
            const expires = counter.expires + perRequest;
            counters.set(key, { ...counter, count, expires });
            return [count, expires - now];
        }),
    };
};
//# sourceMappingURL=memory.js.map