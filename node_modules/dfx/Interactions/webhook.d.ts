import { ConfigSecret, Config, Discord, Effect, Cause } from "dfx/_common";
import { DefinitionNotFound } from "./handlers.js";
import { InteractionBuilder } from "./index.js";
export declare class BadWebhookSignature {
    readonly _tag = "BadWebhookSignature";
}
export type Headers = Record<string, string | string[] | undefined>;
export interface MakeConfigOpts {
    applicationId: string;
    publicKey: ConfigSecret;
}
declare const makeConfig: ({ applicationId, publicKey }: MakeConfigOpts) => {
    applicationId: string;
    publicKey: Uint8Array;
};
export interface WebhookConfig extends ReturnType<typeof makeConfig> {
}
export declare const WebhookConfig: import("@effect/data/Context").Tag<WebhookConfig, WebhookConfig>;
export declare const makeConfigLayer: (a_0: MakeConfigOpts) => import("@effect-http/client/_common").Layer<never, never, WebhookConfig>;
export declare const makeFromConfig: (a: Config<MakeConfigOpts>) => import("@effect-http/client/_common").Layer<never, import("../_common.js").ConfigError, WebhookConfig>;
export declare class WebhookParseError {
    readonly reason: unknown;
    readonly _tag = "WebhookParseError";
    constructor(reason: unknown);
}
export interface HandleWebhookOpts<E> {
    headers: Headers;
    body: string;
    success: (a: Discord.InteractionResponse) => Effect<never, never, void>;
    error: (e: Cause<E>) => Effect<never, never, void>;
}
/**
 * @tsplus getter dfx/InteractionBuilder webhookHandler
 * @tsplus location "dfx/Interactions/webhook"
 */
export declare const makeHandler: <R, E>(ix: InteractionBuilder<R, E>) => ({ headers, body, success, error, }: HandleWebhookOpts<DefinitionNotFound | BadWebhookSignature | WebhookParseError | E>) => import("@effect-http/client/_common").Effect<WebhookConfig | Exclude<R, import("../types.js").Interaction>, never, void>;
/**
 * @tsplus getter dfx/InteractionBuilder simpleWebhookHandler
 * @tsplus location "dfx/Interactions/webhook"
 */
export declare const makeSimpleHandler: <R, E>(ix: InteractionBuilder<R, E>) => ({ headers, body }: {
    headers: Headers;
    body: string;
}) => import("@effect-http/client/_common").Effect<WebhookConfig | Exclude<R, import("../types.js").Interaction>, DefinitionNotFound | BadWebhookSignature | WebhookParseError | E, import("../types.js").InteractionResponse>;
export {};
