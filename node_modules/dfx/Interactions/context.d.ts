import { Discord } from "dfx/_common";
import { Effect, EffectTypeId } from "@effect/io/Effect";
export declare const InteractionContext: import("@effect/data/Context").Tag<import("../types.js").Interaction, import("../types.js").Interaction>;
export declare const ApplicationCommandContext: import("@effect/data/Context").Tag<import("../types.js").ApplicationCommandDatum, import("../types.js").ApplicationCommandDatum>;
export declare const MessageComponentContext: import("@effect/data/Context").Tag<import("../types.js").MessageComponentDatum, import("../types.js").MessageComponentDatum>;
export declare const ModalSubmitContext: import("@effect/data/Context").Tag<import("../types.js").ModalSubmitDatum, import("../types.js").ModalSubmitDatum>;
export interface FocusedOptionContext {
    readonly focusedOption: Discord.ApplicationCommandInteractionDataOption;
}
export declare const FocusedOptionContext: import("@effect/data/Context").Tag<FocusedOptionContext, FocusedOptionContext>;
export interface SubCommandContext {
    readonly command: Discord.ApplicationCommandInteractionDataOption;
}
export declare const SubCommandContext: import("@effect/data/Context").Tag<SubCommandContext, SubCommandContext>;
export declare const interaction: import("@effect/data/Context").Tag<import("../types.js").Interaction, import("../types.js").Interaction>;
export declare const command: import("@effect/data/Context").Tag<import("../types.js").ApplicationCommandDatum, import("../types.js").ApplicationCommandDatum>;
export declare class ResolvedDataNotFound {
    readonly data: Discord.Interaction;
    readonly name?: string | undefined;
    readonly _tag = "ResolvedDataNotFound";
    constructor(data: Discord.Interaction, name?: string | undefined);
}
export declare const resolvedValues: <A>(f: (id: Discord.Snowflake, data: Discord.ResolvedDatum) => A | undefined) => Effect<import("../types.js").Interaction, ResolvedDataNotFound, readonly A[]>;
export declare const resolved: <A>(name: string, f: (id: Discord.Snowflake, data: Discord.ResolvedDatum) => A | undefined) => Effect<import("../types.js").Interaction, ResolvedDataNotFound, A>;
export declare const focusedOptionValue: Effect<FocusedOptionContext, never, string>;
export declare class SubCommandNotFound {
    readonly data: Discord.ApplicationCommandDatum;
    readonly _tag = "SubCommandNotFound";
    constructor(data: Discord.ApplicationCommandDatum);
}
export declare const handleSubCommands: <NER extends Record<string, Effect<any, any, import("../types.js").InteractionResponse>>>(commands: NER) => Effect<import("../types.js").Interaction | import("../types.js").ApplicationCommandDatum | Exclude<[NER[keyof NER]] extends [{
    [EffectTypeId]: {
        _R: (_: never) => infer R;
    };
}] ? R : never, SubCommandContext>, SubCommandNotFound | ([NER[keyof NER]] extends [{
    [EffectTypeId]: {
        _E: (_: never) => infer E;
    };
}] ? E : never), import("../types.js").InteractionResponse>;
export declare const currentSubCommand: Effect<SubCommandContext, never, import("../types.js").ApplicationCommandInteractionDataOption>;
export declare const optionsMap: Effect<import("../types.js").ApplicationCommandDatum, never, import("../_common.js").HashMap<string, string | undefined>>;
export declare class RequiredOptionNotFound {
    readonly data: Discord.ApplicationCommandDatum | Discord.ApplicationCommandInteractionDataOption;
    readonly name: string;
    readonly _tag = "RequiredOptionNotFound";
    constructor(data: Discord.ApplicationCommandDatum | Discord.ApplicationCommandInteractionDataOption, name: string);
}
export declare const option: (name: string) => Effect<import("../types.js").ApplicationCommandDatum, never, import("@effect/data/Option").Option<import("../types.js").ApplicationCommandInteractionDataOption>>;
export declare const optionValue: (name: string) => Effect<import("../types.js").ApplicationCommandDatum, RequiredOptionNotFound, string>;
export declare const optionValueOptional: (name: string) => Effect<import("../types.js").ApplicationCommandDatum, never, import("@effect/data/Option").Option<string>>;
export declare const modalValues: Effect<import("../types.js").ModalSubmitDatum, never, import("../_common.js").HashMap<string, string | undefined>>;
