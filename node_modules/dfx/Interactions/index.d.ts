import { DiscordREST } from "dfx";
import { Discord, Effect } from "dfx/_common";
import * as D from "./definitions.js";
import * as Http from "@effect-http/client";
export { response as r } from "../Helpers/interactions.js";
export * from "./context.js";
export { autocomplete, global, guild, InteractionDefinition, messageComponent, modalSubmit, } from "./definitions.js";
/**
 * @tsplus type dfx/InteractionBuilder
 */
export declare class InteractionBuilder<R, E> {
    readonly definitions: D.InteractionDefinition<R, E>[];
    constructor(definitions: D.InteractionDefinition<R, E>[]);
    add<R1, E1>(definition: D.InteractionDefinition<R1, E1>): InteractionBuilder<R | R1, E | E1>;
    concat<R1, E1>(builder: InteractionBuilder<R1, E1>): InteractionBuilder<R | R1, E | E1>;
    get syncGlobal(): Effect<DiscordREST, import("../DiscordREST.js").DiscordRESTError | Http.ResponseDecodeError, import("../DiscordREST/types.js").ResponseWithData<Discord.ApplicationCommand[]>>;
    syncGuild(appId: Discord.Snowflake, guildId: Discord.Snowflake): Effect<DiscordREST, import("../DiscordREST.js").DiscordRESTError, import("../DiscordREST/types.js").ResponseWithData<Discord.ApplicationCommand[]>>;
}
export declare const builder: InteractionBuilder<never, never>;
export declare const id: (query: string) => (customId: string) => Effect<never, never, boolean>;
export declare const idStartsWith: (query: string) => (customId: string) => Effect<never, never, boolean>;
export declare const idRegex: (query: RegExp) => (customId: string) => Effect<never, never, boolean>;
export declare const option: (command: string, optionName: string) => (data: Pick<Discord.ApplicationCommandDatum, "name">, focusedOption: Pick<Discord.ApplicationCommandInteractionDataOption, "name">) => Effect<never, never, boolean>;
export declare const optionOnly: (optionName: string) => (_: unknown, focusedOption: Pick<Discord.ApplicationCommandInteractionDataOption, "name">) => Effect<never, never, boolean>;
