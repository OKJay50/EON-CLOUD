import * as tsplus_module_1 from "dfx/_common";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "@effect/data/Option";
import * as tsplus_module_4 from "@effect/data/Chunk";
import * as tsplus_module_5 from "@effect/data/Function";
import * as tsplus_module_6 from "dfx";
import * as Arr from "@effect/data/ReadonlyArray";
import * as Ctx from "./context.js";
import { splitDefinitions } from "./utils.js";
export class DefinitionNotFound {
    interaction;
    _tag = "DefinitionNotFound";
    constructor(interaction) {
        this.interaction = interaction;
    }
}
const context = {
    resolve: Ctx.resolved,
    option: Ctx.option,
    optionValue: Ctx.optionValue,
    optionValueOptional: Ctx.optionValueOptional,
    subCommands: Ctx.handleSubCommands,
};
export const handlers = (definitions) => {
    const { Commands, Autocomplete, MessageComponent, ModalSubmit } = splitDefinitions(definitions);
    return {
        [1 /* Discord.InteractionType.PING */]: () => tsplus_module_2.succeed({
            type: 1 /* Discord.InteractionCallbackType.PONG */,
        }),
        [2 /* Discord.InteractionType.APPLICATION_COMMAND */]: i => {
            const data = i.data;
            return tsplus_module_2.provideService(tsplus_module_3.match(tsplus_module_3.fromNullable(Commands[data.name]), () => tsplus_module_2.fail(new DefinitionNotFound(i)), command => tsplus_module_2.isEffect(command.handle)
                ? command.handle
                : command.handle(context)), Ctx.ApplicationCommandContext, data);
        },
        [5 /* Discord.InteractionType.MODAL_SUBMIT */]: (i) => {
            const data = i.data;
            return tsplus_module_5.pipe(ModalSubmit, Arr.map(a => tsplus_module_2.all({
                command: tsplus_module_2.succeed(a),
                match: a.predicate(data.custom_id),
            })), _ => tsplus_module_2.provideService(tsplus_module_2.flatMap(tsplus_module_2.collectAllPar(_), a => tsplus_module_3.match(tsplus_module_4.findFirst(a, a => a.match), () => tsplus_module_2.fail(new DefinitionNotFound(i)), a => a.command.handle)), Ctx.ModalSubmitContext, data));
        },
        [3 /* Discord.InteractionType.MESSAGE_COMPONENT */]: i => {
            const data = i.data;
            return tsplus_module_5.pipe(MessageComponent, Arr.map(a => tsplus_module_2.all({
                command: tsplus_module_2.succeed(a),
                match: a.predicate(data.custom_id),
            })), a => tsplus_module_2.provideService(tsplus_module_2.flatMap(tsplus_module_2.collectAllPar(a), a => tsplus_module_3.match(tsplus_module_4.findFirst(a, a => a.match), () => tsplus_module_2.fail(new DefinitionNotFound(i)), a => a.command.handle)), Ctx.MessageComponentContext, data));
        },
        [4 /* Discord.InteractionType.APPLICATION_COMMAND_AUTOCOMPLETE */]: i => {
            const data = i.data;
            return tsplus_module_3.getOrElse(tsplus_module_3.map(tsplus_module_6.IxHelpers.focusedOption(data), focusedOption => tsplus_module_5.pipe(Autocomplete, Arr.map(_ => tsplus_module_2.all({
                command: tsplus_module_2.succeed(_),
                match: _.predicate(data, focusedOption),
            })), a => tsplus_module_2.provideService(tsplus_module_2.provideService(tsplus_module_2.flatMap(tsplus_module_2.collectAllPar(a), _ => tsplus_module_3.match(tsplus_module_4.findFirst(_, _ => _.match), () => tsplus_module_2.fail(new DefinitionNotFound(i)), _ => _.command.handle)), Ctx.ApplicationCommandContext, data), Ctx.FocusedOptionContext, { focusedOption }))), () => tsplus_module_2.fail(new DefinitionNotFound(i)));
        },
    };
};
//# sourceMappingURL=handlers.js.map