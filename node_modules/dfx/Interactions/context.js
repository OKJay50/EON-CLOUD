import * as tsplus_module_1 from "dfx/_common";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "dfx";
import * as tsplus_module_4 from "@effect/data/Option";
import * as tsplus_module_5 from "@effect/data/Function";
import * as Arr from "@effect/data/ReadonlyArray";
import { EffectTypeId } from "@effect/io/Effect";
export const InteractionContext = tsplus_module_1.Tag();
export const ApplicationCommandContext = tsplus_module_1.Tag();
export const MessageComponentContext = tsplus_module_1.Tag();
export const ModalSubmitContext = tsplus_module_1.Tag();
export const FocusedOptionContext = tsplus_module_1.Tag();
export const SubCommandContext = tsplus_module_1.Tag();
export const interaction = InteractionContext;
export const command = ApplicationCommandContext;
export class ResolvedDataNotFound {
    data;
    name;
    _tag = "ResolvedDataNotFound";
    constructor(data, name) {
        this.data = data;
        this.name = name;
    }
}
export const resolvedValues = (f) => tsplus_module_2.flatMap(InteractionContext, ix => tsplus_module_4.match(tsplus_module_3.IxHelpers.resolveValues(f)(ix), () => tsplus_module_2.fail(new ResolvedDataNotFound(ix)), tsplus_module_2.succeed));
export const resolved = (name, f) => tsplus_module_2.flatMap(InteractionContext, ix => tsplus_module_4.match(tsplus_module_3.IxHelpers.resolveOptionValue(name, f)(ix), () => tsplus_module_2.fail(new ResolvedDataNotFound(ix, name)), tsplus_module_2.succeed));
export const focusedOptionValue = tsplus_module_2.map(FocusedOptionContext, _ => _.focusedOption.value ?? "");
export class SubCommandNotFound {
    data;
    _tag = "SubCommandNotFound";
    constructor(data) {
        this.data = data;
    }
}
export const handleSubCommands = (commands) => tsplus_module_2.flatMap(ApplicationCommandContext, data => tsplus_module_5.pipe(tsplus_module_3.IxHelpers.allSubCommands(data), Arr.findFirst(a => !!commands[a.name]), o => tsplus_module_4.toEither(() => new SubCommandNotFound(data))(o), tsplus_module_2.fromEither, a => tsplus_module_2.flatMap(a, command => tsplus_module_2.provideService(commands[command.name], SubCommandContext, {
    command,
}))));
export const currentSubCommand = tsplus_module_2.map(SubCommandContext, _ => _.command);
export const optionsMap = tsplus_module_2.map(ApplicationCommandContext, tsplus_module_3.IxHelpers.optionsMap);
export class RequiredOptionNotFound {
    data;
    name;
    _tag = "RequiredOptionNotFound";
    constructor(data, name) {
        this.data = data;
        this.name = name;
    }
}
export const option = (name) => tsplus_module_2.map(ApplicationCommandContext, tsplus_module_3.IxHelpers.getOption(name));
export const optionValue = (name) => tsplus_module_2.flatMap(option(name), _ => tsplus_module_4.match(tsplus_module_4.flatMapNullable(_, a => a.value), () => tsplus_module_2.flatMap(command, data => tsplus_module_2.fail(new RequiredOptionNotFound(data, name))), tsplus_module_2.succeed));
export const optionValueOptional = (name) => tsplus_module_2.map(option(name), o => tsplus_module_4.flatMapNullable(o, o => o.value));
export const modalValues = tsplus_module_2.map(ModalSubmitContext, tsplus_module_3.IxHelpers.componentsMap);
//# sourceMappingURL=context.js.map