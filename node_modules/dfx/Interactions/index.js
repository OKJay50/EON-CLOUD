import * as tsplus_module_1 from "@effect/io/Effect";
import { DiscordREST } from "dfx";
import * as Http from "@effect-http/client";
export { response as r } from "../Helpers/interactions.js";
export * from "./context.js";
export { autocomplete, global, guild, messageComponent, modalSubmit, } from "./definitions.js";
/**
 * @tsplus type dfx/InteractionBuilder
 */
export class InteractionBuilder {
    definitions;
    constructor(definitions) {
        this.definitions = definitions;
    }
    add(definition) {
        return new InteractionBuilder([
            ...this.definitions,
            definition,
        ]);
    }
    concat(builder) {
        return new InteractionBuilder([
            ...this.definitions,
            ...builder.definitions,
        ]);
    }
    get syncGlobal() {
        const commands = this.definitions
            .filter((c) => c._tag === "GlobalApplicationCommand")
            .map(c => c.command);
        return tsplus_module_1.flatMap(DiscordREST, rest => tsplus_module_1.flatMap(tsplus_module_1.flatMap(rest
            .getCurrentBotApplicationInformation(), r => r.json), app => rest.bulkOverwriteGlobalApplicationCommands(app.id, {
            body: Http.body.json(commands),
        })));
    }
    syncGuild(appId, guildId) {
        const commands = this.definitions
            .filter((c) => c._tag === "GuildApplicationCommand")
            .map(c => c.command);
        return tsplus_module_1.flatMap(DiscordREST, rest => rest.bulkOverwriteGuildApplicationCommands(appId, guildId, commands));
    }
}
export const builder = new InteractionBuilder([]);
// Filters
export const id = (query) => (customId) => tsplus_module_1.succeed(query === customId);
export const idStartsWith = (query) => (customId) => tsplus_module_1.succeed(customId.startsWith(query));
export const idRegex = (query) => (customId) => tsplus_module_1.succeed(query.test(customId));
export const option = (command, optionName) => (data, focusedOption) => tsplus_module_1.succeed(data.name === command && focusedOption.name === optionName);
export const optionOnly = (optionName) => (_, focusedOption) => tsplus_module_1.succeed(focusedOption.name === optionName);
//# sourceMappingURL=index.js.map