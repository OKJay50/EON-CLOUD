/**
 * @since 1.0.0
 */
// ---------------------------------------------
// hooks
// ---------------------------------------------
/** @internal */
export const ArbitraryHookId = "@effect/schema/ArbitraryHookId";
/** @internal */
export const PrettyHookId = "@effect/schema/PrettyHookId";
// ---------------------------------------------
// Schema APIs
// ---------------------------------------------
/** @internal */
export const makeSchema = ast => ({
  ast
});
/** @internal */
export const getKeysForIndexSignature = (input, parameter) => {
  switch (parameter._tag) {
    case "StringKeyword":
    case "TemplateLiteral":
      return Object.keys(input);
    case "SymbolKeyword":
      return Object.getOwnPropertySymbols(input);
    case "Refinement":
    case "Transform":
      return getKeysForIndexSignature(input, parameter.from);
  }
  return [];
};
// ---------------------------------------------
// general helpers
// ---------------------------------------------
/** @internal */
export const ownKeys = o => Object.keys(o).concat(Object.getOwnPropertySymbols(o));
/** @internal */
export const memoize = f => {
  const cache = new Map();
  return a => {
    if (!cache.has(a)) {
      const b = f(a);
      cache.set(a, b);
      return b;
    }
    return cache.get(a);
  };
};
//# sourceMappingURL=common.mjs.map