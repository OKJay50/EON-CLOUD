/**
 * @since 1.0.0
 */
var _a, _b;
import { makeTraced } from "@effect/data/Debug";
import * as Equal from "@effect/data/Equal";
import { dual } from "@effect/data/Function";
import * as Hash from "@effect/data/Hash";
import * as option from "@effect/data/internal/Option";
/** @internal */
const effectVariance = {
  _R: _ => _,
  _E: _ => _,
  _A: _ => _
};
const EffectTypeId = /*#__PURE__*/Symbol.for("@effect/io/Effect");
/** @internal */
export class Right {
  [(_a = EffectTypeId, Equal.symbol)](that) {
    return isEither(that) && isRight(that) && Equal.equals(that.i0, this.i0);
  }
  [Hash.symbol]() {
    return Hash.hash(this.i0);
  }
  get right() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Right";
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[_a] = effectVariance;
  }
  toJSON() {
    return {
      _tag: this._tag,
      right: this.i0
    };
  }
  traced(trace) {
    if (trace) {
      return makeTraced(this, trace);
    }
    return this;
  }
}
/** @internal */
export class Left {
  [(_b = EffectTypeId, Equal.symbol)](that) {
    return isEither(that) && isLeft(that) && Equal.equals(that.i0, this.i0);
  }
  [Hash.symbol]() {
    return Hash.hash(this.i0);
  }
  get left() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Left";
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[_b] = effectVariance;
  }
  toJSON() {
    return {
      _tag: this._tag,
      left: this.i0
    };
  }
  traced(trace) {
    if (trace) {
      return makeTraced(this, trace);
    }
    return this;
  }
}
/** @internal */
export const isEither = input => typeof input === "object" && input != null && "_tag" in input && (input["_tag"] === "Left" || input["_tag"] === "Right") && Equal.isEqual(input);
/** @internal */
export const isLeft = ma => ma._tag === "Left";
/** @internal */
export const isRight = ma => ma._tag === "Right";
/** @internal */
export const left = e => new Left(e);
/** @internal */
export const right = a => new Right(a);
/** @internal */
export const getLeft = self => isRight(self) ? option.none : option.some(self.left);
/** @internal */
export const getRight = self => isLeft(self) ? option.none : option.some(self.right);
/** @internal */
export const fromOption = /*#__PURE__*/dual(2, (self, onNone) => option.isNone(self) ? left(onNone()) : right(self.value));
//# sourceMappingURL=Either.mjs.map