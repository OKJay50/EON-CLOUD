/**
 * @since 1.0.0
 */
var _a, _b;
import { makeTraced } from "@effect/data/Debug";
import * as Equal from "@effect/data/Equal";
import * as Hash from "@effect/data/Hash";
/** @internal */
const effectVariance = {
  _R: _ => _,
  _E: _ => _,
  _A: _ => _
};
const EffectTypeId = /*#__PURE__*/Symbol.for("@effect/io/Effect");
/** @internal */
export class Some {
  [(_a = EffectTypeId, Equal.symbol)](that) {
    return isOption(that) && isSome(that) && Equal.equals(that.i0, this.i0);
  }
  [Hash.symbol]() {
    return Hash.hash(this.i0);
  }
  toJSON() {
    return {
      _tag: this._tag,
      value: this.i0
    };
  }
  get value() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Some";
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[_a] = effectVariance;
  }
  traced(trace) {
    if (trace) {
      return makeTraced(this, trace);
    }
    return this;
  }
}
/** @internal */
export class None {
  constructor() {
    this._tag = "None";
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[_b] = effectVariance;
  }
  [(_b = EffectTypeId, Equal.symbol)](that) {
    return isOption(that) && isNone(that);
  }
  [Hash.symbol]() {
    return Hash.hash(this._tag);
  }
  toJSON() {
    return {
      _tag: this._tag
    };
  }
  traced(trace) {
    if (trace) {
      return makeTraced(this, trace);
    }
    return this;
  }
}
/** @internal */
export const isOption = input => typeof input === "object" && input != null && "_tag" in input && (input["_tag"] === "None" || input["_tag"] === "Some") && Equal.isEqual(input);
/** @internal */
export const isNone = fa => fa._tag === "None";
/** @internal */
export const isSome = fa => fa._tag === "Some";
/** @internal */
export const none = /*#__PURE__*/new None();
/** @internal */
export const some = a => new Some(a);
//# sourceMappingURL=Option.mjs.map