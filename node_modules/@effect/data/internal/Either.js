"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.right = exports.left = exports.isRight = exports.isLeft = exports.isEither = exports.getRight = exports.getLeft = exports.fromOption = exports.Right = exports.Left = void 0;
var _Debug = /*#__PURE__*/require("@effect/data/Debug");
var Equal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Equal"));
var _Function = /*#__PURE__*/require("@effect/data/Function");
var Hash = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Hash"));
var option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/internal/Option"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 */
var _a, _b;
/** @internal */
const effectVariance = {
  _R: _ => _,
  _E: _ => _,
  _A: _ => _
};
const EffectTypeId = /*#__PURE__*/Symbol.for("@effect/io/Effect");
/** @internal */
class Right {
  [(_a = EffectTypeId, Equal.symbol)](that) {
    return isEither(that) && isRight(that) && Equal.equals(that.i0, this.i0);
  }
  [Hash.symbol]() {
    return Hash.hash(this.i0);
  }
  get right() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Right";
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[_a] = effectVariance;
  }
  toJSON() {
    return {
      _tag: this._tag,
      right: this.i0
    };
  }
  traced(trace) {
    if (trace) {
      return (0, _Debug.makeTraced)(this, trace);
    }
    return this;
  }
}
/** @internal */
exports.Right = Right;
class Left {
  [(_b = EffectTypeId, Equal.symbol)](that) {
    return isEither(that) && isLeft(that) && Equal.equals(that.i0, this.i0);
  }
  [Hash.symbol]() {
    return Hash.hash(this.i0);
  }
  get left() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Left";
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[_b] = effectVariance;
  }
  toJSON() {
    return {
      _tag: this._tag,
      left: this.i0
    };
  }
  traced(trace) {
    if (trace) {
      return (0, _Debug.makeTraced)(this, trace);
    }
    return this;
  }
}
/** @internal */
exports.Left = Left;
const isEither = input => typeof input === "object" && input != null && "_tag" in input && (input["_tag"] === "Left" || input["_tag"] === "Right") && Equal.isEqual(input);
/** @internal */
exports.isEither = isEither;
const isLeft = ma => ma._tag === "Left";
/** @internal */
exports.isLeft = isLeft;
const isRight = ma => ma._tag === "Right";
/** @internal */
exports.isRight = isRight;
const left = e => new Left(e);
/** @internal */
exports.left = left;
const right = a => new Right(a);
/** @internal */
exports.right = right;
const getLeft = self => isRight(self) ? option.none : option.some(self.left);
/** @internal */
exports.getLeft = getLeft;
const getRight = self => isLeft(self) ? option.none : option.some(self.right);
/** @internal */
exports.getRight = getRight;
const fromOption = /*#__PURE__*/(0, _Function.dual)(2, (self, onNone) => option.isNone(self) ? left(onNone()) : right(self.value));
exports.fromOption = fromOption;
//# sourceMappingURL=Either.js.map