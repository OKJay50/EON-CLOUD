"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.untracedMethod = exports.untracedDual = exports.untraced = exports.traced = exports.sourceLocation = exports.runtimeDebug = exports.restoreOn = exports.restoreOff = exports.pipeableWithTrace = exports.methodWithTrace = exports.makeTraced = exports.dualWithTrace = exports.bodyWithTrace = void 0;
var Equal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Equal"));
var _Global = /*#__PURE__*/require("@effect/data/Global");
var Hash = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Hash"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 */
var _a;
/**
 * @since 1.0.0
 * @category debug
 */
const runtimeDebug = /*#__PURE__*/(0, _Global.globalValue)( /*#__PURE__*/Symbol.for("@effect/data/Debug/runtimeDebug"), () => ({
  reportUnhandled: true,
  minumumLogLevel: "Info",
  traceStackLimit: 5,
  tracingEnabled: true,
  parseStack: error => {
    const stack = error.stack;
    if (stack) {
      const lines = stack.split("\n");
      let starts = 0;
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith("Error")) {
          starts = i;
        }
      }
      const frames = [];
      for (let i = starts + 1; i < lines.length; i++) {
        if (lines[i].includes("at")) {
          const blocks = lines[i].split(" ").filter(i => i.length > 0 && i !== "at");
          const name = blocks.length === 2 && !blocks[0].includes("<anonymous>") ? blocks[0] : undefined;
          const file = blocks.length === 2 ? blocks[1] : blocks[0];
          const matchFrame = file?.match(/\(?(.*):(\d+):(\d+)/);
          if (matchFrame) {
            frames.push({
              name,
              fileName: matchFrame[1],
              line: Number.parseInt(matchFrame[2]),
              column: Number.parseInt(matchFrame[3])
            });
          } else {
            frames.push(undefined);
          }
        } else {
          frames.push(undefined);
        }
      }
      return frames;
    }
    return [];
  },
  filterStackFrame: _ => _ != null && !_.fileName.match(/\/internal_effect_untraced/)
}));
exports.runtimeDebug = runtimeDebug;
const sourceLocationProto = /*#__PURE__*/Object.setPrototypeOf({
  toFrame() {
    if ("parsed" in this) {
      return this.parsed;
    }
    const stack = runtimeDebug.parseStack(this);
    if (stack && stack.length >= 2 && stack[0] && stack[1]) {
      this.parsed = {
        ...stack[this.depth - 1],
        name: stack[this.depth - 2]?.name
      };
    } else {
      this.parsed = undefined;
    }
    return this.parsed;
  }
}, Error.prototype);
/**
 * @since 1.0.0
 * @category tracing
 */
const sourceLocation = error => {
  ;
  error.depth = Error.stackTraceLimit;
  Object.setPrototypeOf(error, sourceLocationProto);
  return error;
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.sourceLocation = sourceLocation;
const bodyWithTrace = body => {
  if (!runtimeDebug.tracingEnabled) {
    return body(void 0, restoreOff);
  }
  runtimeDebug.tracingEnabled = false;
  try {
    const limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 3;
    const source = sourceLocation(new Error());
    Error.stackTraceLimit = limit;
    return body(source, restoreOn);
  } finally {
    runtimeDebug.tracingEnabled = true;
  }
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.bodyWithTrace = bodyWithTrace;
const methodWithTrace = body => {
  // @ts-expect-error
  return function () {
    if (!runtimeDebug.tracingEnabled) {
      // @ts-expect-error
      return body(void 0, restoreOff).apply(this, arguments);
    }
    runtimeDebug.tracingEnabled = false;
    try {
      const limit = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      const error = sourceLocation(new Error());
      Error.stackTraceLimit = limit;
      // @ts-expect-error
      return body(error, restoreOn).apply(this, arguments);
    } finally {
      runtimeDebug.tracingEnabled = true;
    }
  };
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.methodWithTrace = methodWithTrace;
const pipeableWithTrace = body => {
  // @ts-expect-error
  return function () {
    if (!runtimeDebug.tracingEnabled) {
      const a = body(void 0, restoreOff);
      // @ts-expect-error
      return self => untraced(() => a.apply(this, arguments)(self));
    }
    runtimeDebug.tracingEnabled = false;
    try {
      const limit = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      const source = sourceLocation(new Error());
      Error.stackTraceLimit = limit;
      const f = body(source, restoreOn);
      // @ts-expect-error
      return self => untraced(() => f.apply(this, arguments)(self));
    } finally {
      runtimeDebug.tracingEnabled = true;
    }
  };
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.pipeableWithTrace = pipeableWithTrace;
const dualWithTrace = (dfLen, body) => {
  const isDataFirst = typeof dfLen === "number" ? args => args.length === dfLen : dfLen;
  return function () {
    if (!runtimeDebug.tracingEnabled) {
      const f = body(void 0, restoreOff);
      if (isDataFirst(arguments)) {
        // @ts-expect-error
        return untraced(() => f.apply(this, arguments));
      }
      return self => untraced(() => f(self, ...arguments));
    }
    runtimeDebug.tracingEnabled = false;
    try {
      const limit = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      const source = sourceLocation(new Error());
      Error.stackTraceLimit = limit;
      const f = body(source, restoreOn);
      if (isDataFirst(arguments)) {
        // @ts-expect-error
        return untraced(() => f.apply(this, arguments));
      }
      return self => untraced(() => f(self, ...arguments));
    } finally {
      runtimeDebug.tracingEnabled = true;
    }
  };
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.dualWithTrace = dualWithTrace;
const untraced = body => {
  if (!runtimeDebug.tracingEnabled) {
    return body(restoreOff);
  }
  runtimeDebug.tracingEnabled = false;
  try {
    return body(restoreOn);
  } finally {
    runtimeDebug.tracingEnabled = true;
  }
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.untraced = untraced;
const untracedDual = (dfLen, body) => {
  // @ts-expect-error
  return function () {
    if (!runtimeDebug.tracingEnabled) {
      const f = body(restoreOff);
      if (arguments.length === dfLen) {
        // @ts-expect-error
        return untraced(() => f.apply(this, arguments));
      }
      return self => untraced(() => f(self, ...arguments));
    }
    runtimeDebug.tracingEnabled = false;
    try {
      const f = body(restoreOn);
      if (arguments.length === dfLen) {
        // @ts-expect-error
        return untraced(() => f.apply(this, arguments));
      }
      return self => untraced(() => f(self, ...arguments));
    } finally {
      runtimeDebug.tracingEnabled = true;
    }
  };
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.untracedDual = untracedDual;
const untracedMethod = body => {
  // @ts-expect-error
  return function () {
    if (!runtimeDebug.tracingEnabled) {
      // @ts-expect-error
      return untraced(() => body(restoreOff).apply(this, arguments));
    }
    runtimeDebug.tracingEnabled = false;
    try {
      // @ts-expect-error
      return untraced(() => body(restoreOn).apply(this, arguments));
    } finally {
      runtimeDebug.tracingEnabled = true;
    }
  };
};
/**
 * @since 1.0.0
 * @category tracing
 */
exports.untracedMethod = untracedMethod;
const traced = body => {
  if (runtimeDebug.tracingEnabled) {
    return body(restoreOn);
  }
  runtimeDebug.tracingEnabled = true;
  try {
    return body(restoreOff);
  } finally {
    runtimeDebug.tracingEnabled = false;
  }
};
/**
 * @since 1.0.0
 * @category restore
 */
exports.traced = traced;
const restoreOn = body => function () {
  if (runtimeDebug.tracingEnabled) {
    // @ts-expect-error
    return body.apply(this, arguments);
  }
  runtimeDebug.tracingEnabled = true;
  try {
    // @ts-expect-error
    return body.apply(this, arguments);
  } finally {
    runtimeDebug.tracingEnabled = false;
  }
};
/**
 * @since 1.0.0
 * @category restore
 */
exports.restoreOn = restoreOn;
const restoreOff = body => function () {
  if (!runtimeDebug.tracingEnabled) {
    // @ts-expect-error
    return body.apply(this, arguments);
  }
  runtimeDebug.tracingEnabled = false;
  try {
    // @ts-expect-error
    return body.apply(this, arguments);
  } finally {
    runtimeDebug.tracingEnabled = true;
  }
};
exports.restoreOff = restoreOff;
const EffectTypeId = /*#__PURE__*/Symbol.for("@effect/io/Effect");
class TracedPrimitive {
  [(_a = EffectTypeId, Equal.symbol)](that) {
    return this === that;
  }
  [Hash.symbol]() {
    return Hash.random(this);
  }
  constructor(i0, trace) {
    this.i0 = i0;
    this.trace = trace;
    this._tag = "Traced";
    this.i1 = undefined;
    this.i2 = undefined;
    this[_a] = effectVariance;
  }
  traced(trace) {
    if (trace) {
      return new TracedPrimitive(this, trace);
    }
    return this;
  }
}
/** @internal */
const effectVariance = {
  _R: _ => _,
  _E: _ => _,
  _A: _ => _
};
/**
 * @since 1.0.0
 * @category tracing
 */
const makeTraced = (self, source) => new TracedPrimitive(self, source);
exports.makeTraced = makeTraced;
//# sourceMappingURL=Debug.js.map