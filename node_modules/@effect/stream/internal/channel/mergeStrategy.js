"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = exports.isMergeStrategy = exports.isBufferSliding = exports.isBackPressure = exports.MergeStrategyTypeId = exports.BufferSliding = exports.BackPressure = void 0;
var _Function = /*#__PURE__*/require("@effect/data/Function");
var OpCodes = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stream/internal/opCodes/mergeStrategy"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @internal */
const MergeStrategySymbolKey = "@effect/stream/Channel/MergeStrategy";
/** @internal */
const MergeStrategyTypeId = /*#__PURE__*/Symbol.for(MergeStrategySymbolKey);
/** @internal */
exports.MergeStrategyTypeId = MergeStrategyTypeId;
const proto = {
  [MergeStrategyTypeId]: MergeStrategyTypeId
};
/** @internal */
const BackPressure = _ => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_BACK_PRESSURE;
  return op;
};
/** @internal */
exports.BackPressure = BackPressure;
const BufferSliding = _ => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_BUFFER_SLIDING;
  return op;
};
/** @internal */
exports.BufferSliding = BufferSliding;
const isMergeStrategy = u => typeof u === "object" && u != null && MergeStrategyTypeId in u;
/** @internal */
exports.isMergeStrategy = isMergeStrategy;
const isBackPressure = self => self._tag === OpCodes.OP_BACK_PRESSURE;
/** @internal */
exports.isBackPressure = isBackPressure;
const isBufferSliding = self => self._tag === OpCodes.OP_BUFFER_SLIDING;
/** @internal */
exports.isBufferSliding = isBufferSliding;
const match = /*#__PURE__*/(0, _Function.dual)(3, (self, onBackPressure, onBufferSliding) => {
  switch (self._tag) {
    case OpCodes.OP_BACK_PRESSURE:
      {
        return onBackPressure();
      }
    case OpCodes.OP_BUFFER_SLIDING:
      {
        return onBufferSliding();
      }
  }
});
exports.match = match;
//# sourceMappingURL=mergeStrategy.js.map