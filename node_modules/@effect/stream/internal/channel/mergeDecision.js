"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = exports.isMergeDecision = exports.MergeDecisionTypeId = exports.Done = exports.AwaitConst = exports.Await = void 0;
var _Function = /*#__PURE__*/require("@effect/data/Function");
var OpCodes = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stream/internal/opCodes/mergeDecision"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @internal */
const MergeDecisionSymbolKey = "@effect/stream/Channel/MergeDecision";
/** @internal */
const MergeDecisionTypeId = /*#__PURE__*/Symbol.for(MergeDecisionSymbolKey);
/** @internal */
exports.MergeDecisionTypeId = MergeDecisionTypeId;
const proto = {
  [MergeDecisionTypeId]: {
    _R: _ => _,
    _E0: _ => _,
    _Z0: _ => _,
    _E: _ => _,
    _Z: _ => _
  }
};
/** @internal */
const Done = effect => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_DONE;
  op.effect = effect;
  return op;
};
/** @internal */
exports.Done = Done;
const Await = f => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_AWAIT;
  op.f = f;
  return op;
};
/** @internal */
exports.Await = Await;
const AwaitConst = effect => Await(() => effect);
/** @internal */
exports.AwaitConst = AwaitConst;
const isMergeDecision = u => typeof u === "object" && u != null && MergeDecisionTypeId in u;
/** @internal */
exports.isMergeDecision = isMergeDecision;
const match = /*#__PURE__*/(0, _Function.dual)(3, (self, onDone, onAwait) => {
  const op = self;
  switch (op._tag) {
    case OpCodes.OP_DONE:
      {
        return onDone(op.effect);
      }
    case OpCodes.OP_AWAIT:
      {
        return onAwait(op.f);
      }
  }
});
exports.match = match;
//# sourceMappingURL=mergeDecision.js.map