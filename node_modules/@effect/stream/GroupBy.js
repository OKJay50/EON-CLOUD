"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.first = exports.filter = exports.evaluateBuffer = exports.evaluate = exports.GroupByTypeId = void 0;
var internal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stream/internal/groupBy"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 * @category symbols
 */
const GroupByTypeId = internal.GroupByTypeId;
/**
 * Run the function across all groups, collecting the results in an
 * arbitrary order.
 *
 * @since 1.0.0
 * @category destructors
 */
exports.GroupByTypeId = GroupByTypeId;
const evaluate = internal.evaluate;
/**
 * Like `evaluate`, but with a configurable `bufferSize` parameter.
 *
 * @since 1.0.0
 * @category destructors
 */
exports.evaluate = evaluate;
const evaluateBuffer = internal.evaluateBuffer;
/**
 * Filter the groups to be processed.
 *
 * @since 1.0.0
 * @category utils
 */
exports.evaluateBuffer = evaluateBuffer;
const filter = internal.filter;
/**
 * Only consider the first `n` groups found in the `Stream`.
 *
 * @since 1.0.0
 * @category utils
 */
exports.filter = filter;
const first = internal.first;
/**
 * Constructs a `GroupBy` from a `Stream`.
 *
 * @since 1.0.0
 * @category constructors
 */
exports.first = first;
const make = internal.make;
exports.make = make;
//# sourceMappingURL=GroupBy.js.map