"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = exports.isMergeStrategy = exports.isBufferSliding = exports.isBackPressure = exports.MergeStrategyTypeId = exports.BufferSliding = exports.BackPressure = void 0;
var internal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stream/internal/channel/mergeStrategy"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category symbols
 */
const MergeStrategyTypeId = internal.MergeStrategyTypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.MergeStrategyTypeId = MergeStrategyTypeId;
const BackPressure = internal.BackPressure;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.BackPressure = BackPressure;
const BufferSliding = internal.BufferSliding;
/**
 * Returns `true` if the specified value is a `MergeStrategy`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.BufferSliding = BufferSliding;
const isMergeStrategy = internal.isMergeStrategy;
/**
 * Returns `true` if the specified `MergeStrategy` is a `BackPressure`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.isMergeStrategy = isMergeStrategy;
const isBackPressure = internal.isBackPressure;
/**
 * Returns `true` if the specified `MergeStrategy` is a `BufferSliding`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.isBackPressure = isBackPressure;
const isBufferSliding = internal.isBufferSliding;
/**
 * Folds an `MergeStrategy` into a value of type `A`.
 *
 * @since 1.0.0
 * @category folding
 */
exports.isBufferSliding = isBufferSliding;
const match = internal.match;
exports.match = match;
//# sourceMappingURL=MergeStrategy.js.map