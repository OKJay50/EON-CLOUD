"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = exports.isRightDone = exports.isMergeState = exports.isLeftDone = exports.isBothRunning = exports.RightDone = exports.MergeStateTypeId = exports.LeftDone = exports.BothRunning = void 0;
var internal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stream/internal/channel/mergeState"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 * @category symbols
 */
const MergeStateTypeId = internal.MergeStateTypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.MergeStateTypeId = MergeStateTypeId;
const BothRunning = internal.BothRunning;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.BothRunning = BothRunning;
const LeftDone = internal.LeftDone;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.LeftDone = LeftDone;
const RightDone = internal.RightDone;
/**
 * Returns `true` if the specified value is a `MergeState`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.RightDone = RightDone;
const isMergeState = internal.isMergeState;
/**
 * Returns `true` if the specified `MergeState` is a `BothRunning`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.isMergeState = isMergeState;
const isBothRunning = internal.isBothRunning;
/**
 * Returns `true` if the specified `MergeState` is a `LeftDone`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.isBothRunning = isBothRunning;
const isLeftDone = internal.isLeftDone;
/**
 * Returns `true` if the specified `MergeState` is a `RightDone`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
exports.isLeftDone = isLeftDone;
const isRightDone = internal.isRightDone;
/**
 * @since 1.0.0
 * @category folding
 */
exports.isRightDone = isRightDone;
const match = internal.match;
exports.match = match;
//# sourceMappingURL=MergeState.js.map