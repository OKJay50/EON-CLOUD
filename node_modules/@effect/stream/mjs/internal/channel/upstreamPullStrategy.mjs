import { dual } from "@effect/data/Function";
import * as OpCodes from "@effect/stream/internal/opCodes/upstreamPullStrategy";
/** @internal */
const UpstreamPullStrategySymbolKey = "@effect/stream/Channel/UpstreamPullStrategy";
/** @internal */
export const UpstreamPullStrategyTypeId = /*#__PURE__*/Symbol.for(UpstreamPullStrategySymbolKey);
/** @internal */
const upstreamPullStrategyVariance = {
  _A: _ => _
};
/** @internal */
const proto = {
  [UpstreamPullStrategyTypeId]: upstreamPullStrategyVariance
};
/** @internal */
export const PullAfterNext = emitSeparator => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_PULL_AFTER_NEXT;
  op.emitSeparator = emitSeparator;
  return op;
};
/** @internal */
export const PullAfterAllEnqueued = emitSeparator => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_PULL_AFTER_ALL_ENQUEUED;
  op.emitSeparator = emitSeparator;
  return op;
};
/** @internal */
export const isUpstreamPullStrategy = u => typeof u === "object" && u != null && UpstreamPullStrategyTypeId in u;
/** @internal */
export const isPullAfterNext = self => self._tag === OpCodes.OP_PULL_AFTER_NEXT;
/** @internal */
export const isPullAfterAllEnqueued = self => self._tag === OpCodes.OP_PULL_AFTER_ALL_ENQUEUED;
/** @internal */
export const match = /*#__PURE__*/dual(3, (self, onPullAfterNext, onPullAfterAllEnqueued) => {
  switch (self._tag) {
    case OpCodes.OP_PULL_AFTER_NEXT:
      {
        return onPullAfterNext(self.emitSeparator);
      }
    case OpCodes.OP_PULL_AFTER_ALL_ENQUEUED:
      {
        return onPullAfterAllEnqueued(self.emitSeparator);
      }
  }
});
//# sourceMappingURL=upstreamPullStrategy.mjs.map