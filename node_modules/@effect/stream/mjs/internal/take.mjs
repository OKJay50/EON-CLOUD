var _a;
import * as Chunk from "@effect/data/Chunk";
import { dualWithTrace, methodWithTrace } from "@effect/data/Debug";
import { constFalse, constTrue, dual } from "@effect/data/Function";
import * as Option from "@effect/data/Option";
import * as Cause from "@effect/io/Cause";
import * as Effect from "@effect/io/Effect";
import * as Exit from "@effect/io/Exit";
/** @internal */
const TakeSymbolKey = "@effect/stream/Take";
/** @internal */
export const TakeTypeId = /*#__PURE__*/Symbol.for(TakeSymbolKey);
/** @internal */
const takeVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
export class TakeImpl {
  constructor(exit) {
    this.exit = exit;
    this[_a] = takeVariance;
  }
}
_a = TakeTypeId;
/** @internal */
export const chunk = chunk => new TakeImpl(Exit.succeed(chunk));
/** @internal */
export const die = defect => new TakeImpl(Exit.die(defect));
/** @internal */
export const dieMessage = message => new TakeImpl(Exit.die(Cause.RuntimeException(message)));
/** @internal */
export const done = /*#__PURE__*/methodWithTrace(trace => self => Effect.done(self.exit).traced(trace));
/** @internal */
export const end = /*#__PURE__*/new TakeImpl( /*#__PURE__*/Exit.fail( /*#__PURE__*/Option.none()));
/** @internal */
export const fail = error => new TakeImpl(Exit.fail(Option.some(error)));
/** @internal */
export const failCause = cause => new TakeImpl(Exit.failCause(Cause.map(Option.some)(cause)));
/** @internal */
export const fromEffect = /*#__PURE__*/methodWithTrace(trace => effect => Effect.matchCause(failCause, of)(effect).traced(trace));
/** @internal */
export const fromExit = exit => new TakeImpl(Exit.mapBoth(Option.some, Chunk.of)(exit));
/** @internal */
export const fromPull = /*#__PURE__*/methodWithTrace(trace => pull => Effect.matchCause(cause => Option.match(() => end, failCause)(Cause.flipCauseOption(cause)), chunk)(pull).traced(trace));
/** @internal */
export const isDone = self => Exit.match(cause => Option.isNone(Cause.flipCauseOption(cause)), constFalse)(self.exit);
/** @internal */
export const isFailure = self => Exit.match(cause => Option.isSome(Cause.flipCauseOption(cause)), constFalse)(self.exit);
/** @internal */
export const isSuccess = self => Exit.match(constFalse, constTrue)(self.exit);
/** @internal */
export const make = exit => new TakeImpl(exit);
/** @internal */
export const match = /*#__PURE__*/dual(4, (self, onEnd, onError, onSuccess) => Exit.match(cause => Option.match(onEnd, onError)(Cause.flipCauseOption(cause)), onSuccess)(self.exit));
/** @internal */
export const matchEffect = /*#__PURE__*/dualWithTrace(4, trace => (self, onEnd, onError, onSuccess) => Exit.matchEffect(cause => Option.match(onEnd, onError)(Cause.flipCauseOption(cause)), onSuccess)(self.exit).traced(trace));
/** @internal */
export const map = /*#__PURE__*/dual(2, (self, f) => new TakeImpl(Exit.map(Chunk.map(f))(self.exit)));
/** @internal */
export const of = value => new TakeImpl(Exit.succeed(Chunk.of(value)));
/** @internal */
export const tap = /*#__PURE__*/dualWithTrace(2, trace => (self, f) => Effect.asUnit(Exit.forEachEffect(f)(self.exit)).traced(trace));
//# sourceMappingURL=take.mjs.map