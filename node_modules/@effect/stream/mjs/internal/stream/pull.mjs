import * as Chunk from "@effect/data/Chunk";
import { methodWithTrace } from "@effect/data/Debug";
import * as Option from "@effect/data/Option";
import * as Effect from "@effect/io/Effect";
import * as Queue from "@effect/io/Queue";
import * as take from "@effect/stream/internal/take";
/**
 * @macro traced
 * @internal
 */
export const emit = /*#__PURE__*/methodWithTrace(trace => value => Effect.succeed(Chunk.of(value)).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const emitChunk = /*#__PURE__*/methodWithTrace(trace => chunk => Effect.succeed(chunk).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const empty = /*#__PURE__*/methodWithTrace(trace => () => Effect.succeed(Chunk.empty()).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const end = /*#__PURE__*/methodWithTrace(trace => () => Effect.fail(Option.none()).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const fail = /*#__PURE__*/methodWithTrace(trace => error => Effect.fail(Option.some(error)).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const failCause = /*#__PURE__*/methodWithTrace(trace => cause => Effect.mapError(Option.some)(Effect.failCause(cause)).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const fromDequeue = /*#__PURE__*/methodWithTrace(trace => dequeue => Effect.flatMap(take.done)(Queue.take(dequeue)).traced(trace));
//# sourceMappingURL=pull.mjs.map