import { dualWithTrace, methodWithTrace } from "@effect/data/Debug";
import * as Option from "@effect/data/Option";
import * as Deferred from "@effect/io/Deferred";
import * as Effect from "@effect/io/Effect";
import * as Ref from "@effect/io/Ref";
/** @internal */
export const HandoffTypeId = /*#__PURE__*/Symbol.for("@effect/stream/Stream/Handoff");
/** @internal */
export const OP_HANDOFF_STATE_EMPTY = "Empty";
/** @internal */
export const OP_HANDOFF_STATE_FULL = "Full";
/** @internal */
const handoffStateEmpty = notifyConsumer => ({
  _tag: OP_HANDOFF_STATE_EMPTY,
  notifyConsumer
});
/** @internal */
const handoffStateFull = (value, notifyProducer) => ({
  _tag: OP_HANDOFF_STATE_FULL,
  value,
  notifyProducer
});
/** @internal */
const handoffStateMatch = (onEmpty, onFull) => {
  return self => {
    switch (self._tag) {
      case OP_HANDOFF_STATE_EMPTY:
        {
          return onEmpty(self.notifyConsumer);
        }
      case OP_HANDOFF_STATE_FULL:
        {
          return onFull(self.value, self.notifyProducer);
        }
    }
  };
};
/** @internal */
const handoffVariance = {
  _A: _ => _
};
/** @internal */
export const make = /*#__PURE__*/methodWithTrace(trace => () => Effect.map(ref => ({
  [HandoffTypeId]: handoffVariance,
  ref
}))(Effect.flatMap(deferred => Ref.make(handoffStateEmpty(deferred)))(Deferred.make())).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const offer = /*#__PURE__*/dualWithTrace(2, trace => (self, value) => {
  return Effect.flatMap(deferred => Effect.flatten(Ref.modify(self.ref, state => handoffStateMatch(notifyConsumer => [Effect.zipRight(Deferred.await(deferred))(Deferred.succeed(notifyConsumer, void 0)), handoffStateFull(value, deferred)], (_, notifyProducer) => [Effect.flatMap(() => offer(value)(self))(Deferred.await(notifyProducer)), state])(state))))(Deferred.make()).traced(trace);
});
/**
 * @macro traced
 * @since 1.0.0
 */
export const take = /*#__PURE__*/methodWithTrace(trace => self => Effect.flatMap(deferred => Effect.flatten(Ref.modify(self.ref, state => handoffStateMatch(notifyConsumer => [Effect.flatMap(() => take(self))(Deferred.await(notifyConsumer)), state], (value, notifyProducer) => [Effect.as(value)(Deferred.succeed(notifyProducer, void 0)), handoffStateEmpty(deferred)])(state))))(Deferred.make()).traced(trace));
/**
 * @macro traced
 * @internal
 */
export const poll = /*#__PURE__*/methodWithTrace(trace => self => Effect.flatMap(deferred => Effect.flatten(Ref.modify(self.ref, state => handoffStateMatch(() => [Effect.succeed(Option.none()), state], (value, notifyProducer) => [Effect.as(Option.some(value))(Deferred.succeed(notifyProducer, void 0)), handoffStateEmpty(deferred)])(state))))(Deferred.make()).traced(trace));
//# sourceMappingURL=handoff.mjs.map