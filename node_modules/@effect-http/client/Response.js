import * as tsplus_module_1 from "@effect/stream/Stream";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "@effect/schema/Parser";
import { ResponseDecodeError, SchemaDecodeError } from "./Error.js";
import { fromReadableStream } from "./util/stream.js";
class ResponseImpl {
    source;
    constructor(source) {
        this.source = source;
    }
    get status() {
        return this.source.status;
    }
    get headers() {
        return this.source.headers;
    }
    get stream() {
        return this.source.body
            ? tsplus_module_1.mapError(fromReadableStream(() => this.source.body), _ => new ResponseDecodeError(_, this, "stream"))
            : tsplus_module_1.fail(new ResponseDecodeError("no body", this, "stream"));
    }
    get json() {
        return tsplus_module_2.tryCatchPromise(() => this.source.json(), _ => new ResponseDecodeError(_, this, "json"));
    }
    get text() {
        return tsplus_module_2.tryCatchPromise(() => this.source.text(), _ => new ResponseDecodeError(_, this, "text"));
    }
    get formData() {
        return tsplus_module_2.tryCatchPromise(() => this.source.formData(), _ => new ResponseDecodeError(_, this, "text"));
    }
    get blob() {
        return tsplus_module_2.tryCatchPromise(() => this.source.blob(), _ => new ResponseDecodeError(_, this, "blob"));
    }
    decode(schema, options) {
        const parse = tsplus_module_3.parseEffect(schema);
        return tsplus_module_2.flatMap(this.json, _ => tsplus_module_2.mapError(parse(_, options), _ => new SchemaDecodeError(_, this)));
    }
}
export const fromWeb = (_) => new ResponseImpl(_);
//# sourceMappingURL=Response.js.map