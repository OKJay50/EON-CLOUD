import { Chunk } from "@effect/data/Chunk";
import { HashMap } from "@effect/data/HashMap";
import { Maybe } from "@effect-http/client/_common";
import { Stream } from "@effect/stream/Stream";
import { Effect } from "@effect/io/Effect";
import { ParseOptions } from "@effect/schema/AST";
import { SchemaEncodeError } from "./Error.js";
import type { RequestBody } from "./Request/Body.js";
import { RequestExecutor } from "./Request/Executor.js";
import { Json, Schema } from "@effect/schema/Schema";
export type HttpMethod = "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "HEAD" | "OPTIONS";
/**
 * @tsplus type effect-http/client/Request
 * @tsplus companion effect-http/client/Request.Ops
 */
export interface Request {
    readonly _tag: "Request";
    readonly url: string;
    readonly urlParams: Chunk<[string, string]>;
    readonly method: HttpMethod;
    readonly headers: HashMap<string, string>;
    readonly body: Maybe<RequestBody>;
}
export interface MakeOptions {
    readonly params: Record<string, any>;
    readonly headers: Record<string, string>;
    readonly body: RequestBody;
    readonly accept: string;
    readonly acceptJson: boolean;
}
/**
 * @tsplus static effect-http/client/Request.Ops make
 * @tsplus location "@effect-http/client/Request"
 */
export declare const make: (method: HttpMethod) => (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops get
 * @tsplus location "@effect-http/client/Request"
 */
export declare const get: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops post
 * @tsplus location "@effect-http/client/Request"
 */
export declare const post: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops put
 * @tsplus location "@effect-http/client/Request"
 */
export declare const put: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops del
 * @tsplus location "@effect-http/client/Request"
 */
export declare const del: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops patch
 * @tsplus location "@effect-http/client/Request"
 */
export declare const patch: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops head
 * @tsplus location "@effect-http/client/Request"
 */
export declare const head: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus static effect-http/client/Request.Ops options
 * @tsplus location "@effect-http/client/Request"
 */
export declare const options: (url: string, options?: Partial<MakeOptions>) => Request;
/**
 * @tsplus pipeable effect-http/client/Request setHeader
 * @tsplus location "@effect-http/client/Request"
 */
export declare const setHeader: (name: string, value: string) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request setHeaders
 * @tsplus location "@effect-http/client/Request"
 */
export declare const setHeaders: (headers: Record<string, string>) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request updateUrl
 * @tsplus location "@effect-http/client/Request"
 */
export declare const updateUrl: (f: (url: string) => string) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request accept
 * @tsplus location "@effect-http/client/Request"
 */
export declare const accept: (value: string) => (self: Request) => Request;
/**
 * @tsplus getter effect-http/client/Request acceptJson
 * @tsplus location "@effect-http/client/Request"
 */
export declare const acceptJson: (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request appendParam
 * @tsplus location "@effect-http/client/Request"
 */
export declare const appendParam: (name: string, value: any) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request appendParams
 * @tsplus location "@effect-http/client/Request"
 */
export declare const appendParams: (params: Record<string, any>) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request setParam
 * @tsplus location "@effect-http/client/Request"
 */
export declare const setParam: (name: string, value: any) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request setParams
 * @tsplus location "@effect-http/client/Request"
 */
export declare const setParams: (params: Record<string, any>) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request setBody
 * @tsplus location "@effect-http/client/Request"
 */
export declare const setBody: (body: RequestBody) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request textBody
 * @tsplus location "@effect-http/client/Request"
 */
export declare const textBody: (value: string, contentType?: string) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request jsonBody
 * @tsplus location "@effect-http/client/Request"
 */
export declare const jsonBody: (value: unknown) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request searchParamsBody
 * @tsplus location "@effect-http/client/Request"
 */
export declare const searchParamsBody: (value: URLSearchParams) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request formDataBody
 * @tsplus location "@effect-http/client/Request"
 */
export declare const formDataBody: (value: FormData) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request streamBody
 * @tsplus location "@effect-http/client/Request"
 */
export declare const streamBody: (value: Stream<never, unknown, Uint8Array>, { contentType, contentLength, }?: {
    contentType?: string | undefined;
    contentLength?: number | undefined;
}) => (self: Request) => Request;
/**
 * @tsplus pipeable effect-http/client/Request withSchema
 * @tsplus location "@effect-http/client/Request"
 */
export declare const withSchema: <I extends Json, O, R, E, A>(schema: Schema<I, O>, run: RequestExecutor<R, E, A>, options?: ParseOptions) => (self: Request) => (input: O) => import("./_common.js").Effect<R, E | SchemaEncodeError, A>;
