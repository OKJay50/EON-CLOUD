import * as tsplus_module_1 from "@effect/data/Chunk";
import * as tsplus_module_2 from "@effect/data/HashMap";
import * as tsplus_module_3 from "@effect/data/Option";
import * as tsplus_module_4 from "@effect/schema/Parser";
import * as tsplus_module_5 from "@effect/io/Effect";
import { SchemaEncodeError } from "./Error.js";
import * as body from "./Request/Body.js";
const emptyRequest = {
    _tag: "Request",
    method: "GET",
    url: "",
    urlParams: tsplus_module_1.empty(),
    headers: tsplus_module_2.empty(),
    body: tsplus_module_3.none(),
};
/**
 * @tsplus static effect-http/client/Request.Ops make
 */
const make_1 = (method) => {
    let request = {
        ...emptyRequest,
        method,
    };
    return (url, options = {}) => {
        request = {
            ...request,
            url,
        };
        if (options.body) {
            request = setBody_1(options.body)(request);
        }
        if (options.acceptJson) {
            request = acceptJson_1(request);
        }
        if (options.accept) {
            request = accept_1(options.accept)(request);
        }
        if (options.headers) {
            request = setHeaders_1(options.headers)(request);
        }
        if (options.params) {
            request = appendParams_1(options.params)(request);
        }
        if (options.body) {
            request = setBody_1(options.body)(request);
        }
        return request;
    };
};
export const make = make_1;
/**
 * @tsplus static effect-http/client/Request.Ops get
 */
export const get = make_1("GET");
/**
 * @tsplus static effect-http/client/Request.Ops post
 */
export const post = make_1("POST");
/**
 * @tsplus static effect-http/client/Request.Ops put
 */
export const put = make_1("PUT");
/**
 * @tsplus static effect-http/client/Request.Ops del
 */
export const del = make_1("DELETE");
/**
 * @tsplus static effect-http/client/Request.Ops patch
 */
export const patch = make_1("PATCH");
/**
 * @tsplus static effect-http/client/Request.Ops head
 */
export const head = make_1("HEAD");
/**
 * @tsplus static effect-http/client/Request.Ops options
 */
export const options = make_1("OPTIONS");
/**
 * @tsplus pipeable effect-http/client/Request setHeader
 */
const setHeader_1 = (name, value) => (self) => ({
    ...self,
    headers: tsplus_module_2.set(self.headers, name.toLowerCase(), value),
});
export const setHeader = setHeader_1;
/**
 * @tsplus pipeable effect-http/client/Request setHeaders
 */
const setHeaders_1 = (headers) => (self) => Object.entries(headers).reduce((acc, [key, value]) => setHeader_1(key, value)(acc), self);
export const setHeaders = setHeaders_1;
/**
 * @tsplus pipeable effect-http/client/Request updateUrl
 */
export const updateUrl = (f) => (self) => ({
    ...self,
    url: f(self.url),
});
/**
 * @tsplus pipeable effect-http/client/Request accept
 */
const accept_1 = (value) => setHeader_1("Accept", value);
export const accept = accept_1;
/**
 * @tsplus getter effect-http/client/Request acceptJson
 */
const acceptJson_1 = accept_1("application/json");
export const acceptJson = acceptJson_1;
/**
 * @tsplus pipeable effect-http/client/Request appendParam
 */
const appendParam_1 = (name, value) => (self) => {
    if (Array.isArray(value)) {
        return {
            ...self,
            urlParams: tsplus_module_1.concat(self.urlParams, tsplus_module_1.fromIterable(value.map(_ => [name, _]))),
        };
    }
    else if (typeof value === "string") {
        return {
            ...self,
            urlParams: tsplus_module_1.append(self.urlParams, [name, value]),
        };
    }
    return {
        ...self,
        urlParams: tsplus_module_1.append(self.urlParams, [name, JSON.stringify(value)]),
    };
};
export const appendParam = appendParam_1;
/**
 * @tsplus pipeable effect-http/client/Request appendParams
 */
const appendParams_1 = (params) => (self) => Object.entries(params).reduce((acc, [key, value]) => appendParam_1(key, value)(acc), self);
export const appendParams = appendParams_1;
/**
 * @tsplus pipeable effect-http/client/Request setParam
 */
const setParam_1 = (name, value) => (self) => appendParam_1(name, value)({
    ...self,
    urlParams: tsplus_module_1.filter(self.urlParams, ([key]) => key !== name),
});
export const setParam = setParam_1;
/**
 * @tsplus pipeable effect-http/client/Request setParams
 */
export const setParams = (params) => (self) => Object.entries(params).reduce((acc, [key, value]) => setParam_1(key, value)(acc), self);
/**
 * @tsplus pipeable effect-http/client/Request setBody
 */
const setBody_1 = (body) => (self) => {
    let request = {
        ...self,
        body: tsplus_module_3.some(body),
    };
    if (body._tag === "FormDataBody") {
        return request;
    }
    request = tsplus_module_3.match(body.contentType, () => request, contentType => setHeader_1("content-type", contentType)(request));
    request = tsplus_module_3.match(body.contentLength, () => request, contentLength => setHeader_1("content-length", contentLength.toString())(request));
    return request;
};
export const setBody = setBody_1;
/**
 * @tsplus pipeable effect-http/client/Request textBody
 */
export const textBody = (value, contentType) => (self) => setBody_1(body.text(value, contentType))(self);
/**
 * @tsplus pipeable effect-http/client/Request jsonBody
 */
const jsonBody_1 = (value) => (self) => acceptJson_1(setBody_1(body.json(value))(self));
export const jsonBody = jsonBody_1;
/**
 * @tsplus pipeable effect-http/client/Request searchParamsBody
 */
export const searchParamsBody = (value) => (self) => setBody_1(body.searchParams(value))(self);
/**
 * @tsplus pipeable effect-http/client/Request formDataBody
 */
export const formDataBody = (value) => (self) => setBody_1(body.formData(value))(self);
/**
 * @tsplus pipeable effect-http/client/Request streamBody
 */
export const streamBody = (value, { contentType, contentLength, } = {}) => (self) => setBody_1(body.stream(value, contentType, contentLength))(self);
/**
 * @tsplus pipeable effect-http/client/Request withSchema
 */
export const withSchema = (schema, run, options) => {
    const encode = tsplus_module_4.encodeEffect(schema);
    return (self) => (input) => tsplus_module_5.flatMap(tsplus_module_5.mapError(encode(input, options), _ => new SchemaEncodeError(_, self)), _ => run(jsonBody_1(_)(self)));
};
//# sourceMappingURL=Request.js.map