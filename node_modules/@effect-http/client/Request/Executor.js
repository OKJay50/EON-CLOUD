import * as tsplus_module_1 from "@effect/data/Context";
import * as tsplus_module_2 from "@effect/io/Effect";
import { StatusCodeError } from "../Error.js";
/**
 * A tag for the HttpRequestExecutor service.
 *
 * @since 1.0.0
 */
export const HttpRequestExecutor = tsplus_module_1.Tag();
/**
 * @tsplus pipeable effect-http/client/RequestExecutor contramap
 */
export const contramap = (f) => (self) => request => self(f(request));
/**
 * @tsplus pipeable effect-http/client/RequestExecutor contramapEffect
 */
export const contramapEffect = (f) => (self) => request => tsplus_module_2.flatMap(f(request), self);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor map
 */
export const map = (f) => (self) => request => tsplus_module_2.map(self(request), f);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor mapEffect
 */
export const mapEffect = (f) => (self) => request => tsplus_module_2.flatMap(self(request), f);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor filterStatus
 */
const filterStatus_1 = (f) => (self) => request => tsplus_module_2.filterOrElseWith(self(request), _ => f(_.status), _ => tsplus_module_2.fail(new StatusCodeError(_)));
export const filterStatus = filterStatus_1;
/**
 * @tsplus getter effect-http/client/RequestExecutor filterStatusOk
 */
export const filterStatusOk = filterStatus_1(_ => _ >= 200 && _ < 300);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor filterOrElseWith
 */
export const filterOrElseWith = (f, orElse) => (self) => request => tsplus_module_2.filterOrElseWith(self(request), f, orElse);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor retry
 */
export const retry = (policy) => (self) => request => tsplus_module_2.retry(self(request), policy);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor catchTag
 */
export const catchTag = (tag, f) => (self) => request => tsplus_module_2.catchTag(self(request), tag, f);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor catchTags
 */
export const catchTags = (cases) => (self) => request => tsplus_module_2.catchTags(self(request), cases);
/**
 * @tsplus pipeable effect-http/client/RequestExecutor catchAll
 */
export const catchAll = (f) => (self) => request => tsplus_module_2.catchAll(self(request), f);
//# sourceMappingURL=Executor.js.map