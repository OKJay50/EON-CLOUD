import { Effect } from "@effect/io/Effect";
import type { ParseOptions } from "@effect/schema/AST";
import { Json, Schema } from "@effect/schema/Schema";
import { RequestError, ResponseDecodeError, SchemaDecodeError, StatusCodeError } from "../Error.js";
import { Request } from "../Request.js";
import * as response from "../Response.js";
import type { RequestExecutor } from "./Executor.js";
import * as executor from "./Executor.js";
/**
 * A request executor that uses the global fetch function.
 *
 * It performs no validation on the response status code.
 *
 * @since 1.0.0
 */
export declare const fetch: (options?: RequestInit) => RequestExecutor<never, RequestError, response.Response>;
/**
 * A request executor that uses the global fetch function.
 *
 * It filters out responses with a status code outside the range 200-299.
 *
 * @since 1.0.0
 */
export declare const fetchOk: (options?: RequestInit | undefined) => RequestExecutor<never, RequestError | StatusCodeError, response.Response>;
/**
 * @since 1.0.0
 * @tsplus pipeable effect-http/client/Request fetch
 * @tsplus location "@effect-http/client/Request/FetchExecutor"
 */
export declare const fetch_: (options?: RequestInit) => (request: Request) => Effect<never, RequestError | StatusCodeError, response.Response>;
/**
 * A request executor that uses the global fetch function.
 *
 * It sets the Accept header to "application/json" and decodes the response
 * body.
 *
 * @since 1.0.0
 */
export declare const fetchJson: (options?: RequestInit | undefined) => RequestExecutor<never, ResponseDecodeError | RequestError | StatusCodeError, unknown>;
/**
 * @tsplus pipeable effect-http/client/Request fetchJson
 * @tsplus location "@effect-http/client/Request/FetchExecutor"
 */
export declare const fetchJson_: (options?: RequestInit) => (request: Request) => Effect<never, RequestError | StatusCodeError | ResponseDecodeError, unknown>;
/**
 * A request executor that uses the global fetch function.
 *
 * It decodes the response body using the given schema.
 *
 * @since 1.0.0
 */
export declare const fetchDecode: <I extends Json, O>(schema: Schema<I, O>, options?: ParseOptions, requestInit?: RequestInit) => RequestExecutor<never, ResponseDecodeError | SchemaDecodeError | RequestError | StatusCodeError, O>;
/**
 * @tsplus pipeable effect-http/client/Request fetchDecode
 * @tsplus location "@effect-http/client/Request/FetchExecutor"
 */
export declare const fetchDecode_: <I extends Json, O>(schema: Schema<I, O>, options?: ParseOptions, requestInit?: RequestInit) => (request: Request) => Effect<never, RequestError | StatusCodeError | ResponseDecodeError | SchemaDecodeError, O>;
export declare const LiveFetchRequestExecutor: import("../_common.js").Layer<never, never, executor.HttpRequestExecutor>;
