import { identity } from "@effect/data/Function";
import { ParseError } from "@effect/schema/ParseResult";
import { Request } from "./Request.js";
import { Response } from "./Response.js";
export declare const HttpClientErrorTypeId: unique symbol;
export type HttpClientErrorTypeId = typeof HttpClientErrorTypeId;
export type HttpClientError = RequestError | StatusCodeError | ResponseDecodeError | SchemaDecodeError | SchemaEncodeError;
export declare abstract class BaseHttpError {
    readonly [HttpClientErrorTypeId]: (_: HttpClientErrorTypeId) => unknown;
}
export declare class RequestError extends BaseHttpError {
    readonly request: Request;
    readonly error: unknown;
    readonly _tag = "RequestError";
    constructor(request: Request, error: unknown);
}
export declare class StatusCodeError extends BaseHttpError {
    readonly response: Response;
    readonly _tag = "StatusCodeError";
    readonly status: number;
    constructor(response: Response);
}
export declare class ResponseDecodeError extends BaseHttpError {
    readonly error: unknown;
    readonly source: Response;
    readonly kind: "json" | "text" | "blob" | "arrayBuffer" | "formData" | "stream";
    readonly _tag = "ResponseDecodeError";
    constructor(error: unknown, source: Response, kind: "json" | "text" | "blob" | "arrayBuffer" | "formData" | "stream");
}
export declare class SchemaEncodeError extends BaseHttpError {
    readonly error: ParseError;
    readonly request: Request;
    readonly _tag = "SchemaEncodeError";
    constructor(error: ParseError, request: Request);
}
export declare class SchemaDecodeError extends BaseHttpError {
    readonly error: ParseError;
    readonly response: Response;
    readonly _tag = "SchemaDecodeError";
    constructor(error: ParseError, response: Response);
}
