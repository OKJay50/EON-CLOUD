import { Stream } from "@effect/stream/Stream";
import type { Effect } from "@effect/io/Effect";
import { ResponseDecodeError, SchemaDecodeError } from "./Error.js";
import type { ParseOptions } from "@effect/schema/AST";
import { Json, Schema } from "@effect/schema/Schema";
export interface Response {
    readonly status: number;
    readonly headers: Headers;
    readonly stream: Stream<never, ResponseDecodeError, Uint8Array>;
    readonly json: Effect<never, ResponseDecodeError, unknown>;
    readonly text: Effect<never, ResponseDecodeError, string>;
    readonly formData: Effect<never, ResponseDecodeError, FormData>;
    readonly blob: Effect<never, ResponseDecodeError, Blob>;
    readonly decode: <I extends Json, O>(schema: Schema<I, O>, options?: ParseOptions) => Effect<never, ResponseDecodeError | SchemaDecodeError, O>;
}
export declare const fromWeb: (_: globalThis.Response) => Response;
